# client individual, activity + spr_cashbox_area_detailed + bi_pos_type_datails

###################################### CLIENT INDIVIDUAL ##############################################################

# tables bi_transactions_payout_pos, bi_customers,
# bi_transactions_out are uploading in postgres_clickhouse_transfer branch

# proc_15_agr_customers

  "tab_bi_agr_tickets_daily":
    clickhouse_query: "insert into oplati_views_report.bi_agr_tickets_daily
						WITH ticket_data AS (
							SELECT
								DATE_TRUNC('day', date_time) AS report_date,
								id,
								'Наземный транспорт' AS ticket_type,
								ticket_area,
								age_group,
								profile_id
							FROM
								oplati_analytic.bi_tickets_customer
							WHERE
								status = 1
								AND DATE_TRUNC('day', date_time) =today() - 1

							UNION ALL 

							SELECT 
								DATE_TRUNC('day', created_date) AS report_date,
								bpt.purchase_id AS id,
								'Метро' AS ticket_type,
								'Минск' AS ticket_area,
								age_group,
								bpt.profile_id
							FROM
								oplati_analytic.bi_pos_type_2023 bpt
							LEFT JOIN oplati_analytic.bi_customers bc 
								ON bpt.profile_id = bc.profile_id
							WHERE 
								status = 1
								AND org_id = 965715
								AND DATE_TRUNC('day', created_date) =  today() -1
						),

						unique_clients AS (
							SELECT 
								report_date,
								COUNT(DISTINCT profile_id) AS total_clients
							FROM 
								ticket_data
							GROUP BY 
								report_date
						)

						SELECT  
							td.report_date,
							td.ticket_type,
							td.ticket_area,
							td.age_group,
							COUNT(DISTINCT td.id) AS amount_ticket,
							COUNT(DISTINCT td.profile_id) AS amount_clients,
							uc.total_clients
						FROM
							ticket_data td
						JOIN 
							unique_clients uc ON td.report_date = uc.report_date
						GROUP BY  
							td.report_date,
							td.ticket_type,
							td.ticket_area,
							td.age_group,
							uc.total_clients;"

  "tab_bi_agr_travel_card_daily":
    clickhouse_query: "insert into  oplati_views_report.bi_agr_travel_card_daily
                        SELECT
                         today()-1 as date,
                         ticket_area,
                         group_age,
                         COUNT(*) AS count
                        FROM oplati_analytic.bi_travel_card
                        where status = 'PAID'
                         AND IFNULL(date_begin, today() - 1)::date <= today() - 1
                         AND IFNULL(date_end, today() - 1)::date > today()-1
                        group by ticket_area,group_age;"

  "tab_bi_agr_tickets_monthly":
    overwrite_period: overwrite
    clickhouse_schema: oplati_views_report
    clickhouse_table: bi_agr_tickets_monthly
    datetime_field: report_date
    recount_period: month
    clickhouse_query: "insert into oplati_views_report.bi_agr_tickets_monthly
                     WITH ticket_data AS ( SELECT
								DATE_TRUNC('month', date_time) AS report_date,
								id,
								'Наземный транспорт' AS ticket_type,
								ticket_area,
								age_group,
								profile_id
							FROM
								oplati_analytic.bi_tickets_customer
							WHERE
								status = 1
								AND DATE_TRUNC('month', date_time) =DATE_TRUNC('month', today() - 1)

							UNION ALL 

							SELECT 
								DATE_TRUNC('month', created_date) AS report_date,
								bpt.purchase_id AS id,
								'Метро' AS ticket_type,
								'Минск' AS ticket_area,
								age_group,
								bpt.profile_id
							FROM
								oplati_analytic.bi_pos_type_2023 bpt
							LEFT JOIN oplati_analytic.bi_customers bc 
								ON bpt.profile_id = bc.profile_id
							WHERE 
								status = 1
								AND org_id = 965715
								AND DATE_TRUNC('month', created_date) =  DATE_TRUNC('month', today() - 1)
						),

						unique_clients AS (
							SELECT 
								report_date,
								COUNT(DISTINCT profile_id) AS total_clients
							FROM 
								ticket_data
							GROUP BY 
								report_date
						)

						SELECT  
							td.report_date,
							td.ticket_type,
							td.ticket_area,
							td.age_group,
							COUNT(DISTINCT td.id) AS amount_ticket,
							COUNT(DISTINCT td.profile_id) AS amount_clients,
							uc.total_clients
						FROM
							ticket_data td
						JOIN 
							unique_clients uc ON td.report_date = uc.report_date
						GROUP BY  
							td.report_date,
							td.ticket_type,
							td.ticket_area,
							td.age_group,
							uc.total_clients;"

  "tab_bi_agr_tcket_area":
    overwrite_period: overwrite
    clickhouse_schema: oplati_views_report
    clickhouse_table: bi_agr_tcket_area
    datetime_field: report_date
    recount_period: month
    clickhouse_query: "insert into oplati_views_report.bi_agr_tcket_area
                        SELECT
                            CASE
                              WHEN date_trunc('month', today() - 1) = date_trunc('month', today())
                              THEN date_trunc('month', today())
                              ELSE date_trunc('month', today() - 1)
                            END as report_date,
                        age_group AS age_group,
                        ticket_area AS ticket_area,
                        count(DISTINCT profile_id) AS amount_clients
                        FROM oplati_analytic.bi_tickets_customer
                        WHERE status = 1
                            AND date_time::date < CASE WHEN date_trunc('month', today() - 1) = date_trunc('month', today())
                               THEN date_trunc('month', today())
                               ELSE date_trunc('month', today() - 1)
                            END + INTERVAL '1 month'
                        GROUP BY age_group, ticket_area;"

  "tab_bi_agr_group_wallet_monthly":
    overwrite_period: overwrite
    clickhouse_schema: oplati_views_report
    clickhouse_table: bi_agr_group_wallet_monthly
    datetime_field: report_date
    recount_period: month
    clickhouse_query: "insert into oplati_views_report.bi_agr_group_wallet_monthly
                        select * from (
                            SELECT
                                DATE_TRUNC('month', opened_on) AS report_date,
                             'Всего кошельков' as purpose_pay,
                                count(DISTINCT wallet_id) AS value,
                                'Total' as type
                                FROM oplati_analytic.bi_group_wallet
                                where DATE_TRUNC('month', opened_on) = DATE_TRUNC('month', today()-1)
                                GROUP BY DATE_TRUNC('month', opened_on)

                            union all

                            SELECT
                                DATE_TRUNC('month', trans_date) AS report_date,
                                'Зачисления на групповые кошельки' as  purpose_pay,
                                round(sum(sum),2)  AS value,
                                type
                            FROM oplati_analytic.bi_transactions_group_wallet
                            WHERE  type = 'IN'
                                and  DATE_TRUNC('month', trans_date) = DATE_TRUNC('month', today()-1)
                            GROUP BY DATE_TRUNC('month', trans_date), type

                            union all

                            SELECT
                                DATE_TRUNC('month', trans_date) AS report_date,
                                purpose_pay AS purpose_pay,
                                round(sum(sum),2)  AS value,
                                type
                            FROM oplati_analytic.bi_transactions_group_wallet
                            WHERE DATE_TRUNC('month', trans_date) = DATE_TRUNC('month', today()-1)
                                and type = 'OUT'
                            GROUP BY purpose_pay, DATE_TRUNC('month', trans_date), type
                        )g_val
                        order by report_date asc;"

  "tab_bi_agr_customers_indicators":
    clickhouse_query: "insert into oplati_views_report.bi_agr_customers_indicators
                        select
                         total_c.report_date,
                         total_c.total_clients,
                         total_c.non_act_pers,
                         total_ner.amount_nerez,
                         total_belk.clients_belkard,
                         total_virt.act_clients_virtual,
                         z_ner.total_country,
                         clients_in,
                         erip_clients,
                         p2p_c.p2p_clients,
                         gr_wal.group_wallet,
                         total_ticket,
                         total_travel_card,
                         total_city_vehicle,
                         active_city_week,
                         city_travel_card,
                         city_travel_card_month,
                         sum_pos_payments,
                         in_unic_customers,
                         out_unic_customers,
                         erip_unic_customers,
                         pp_unic_customers
                        from (select
                            	today()-1 as  report_date,
                            	(select count(profile_id) from oplati_analytic.bi_customers bc
                             where profile_id not in (
                            		select se.profile_id from (
                            		                            select
                            		                                profile_id,
                            		                                max(action_date) as action_date
                            		                            from oplati_analytic.bi_log_history group by profile_id) se
                                                          join oplati_analytic.bi_log_history slh
                                                        		on se.profile_id = slh.profile_id  and se.action_date = slh.action_date
                                                        		where \"action\" = 'ADD'
                            	)) as total_clients ,

                            round(((select count(profile_id) from oplati_analytic.bi_customers bc
                        	where profile_id not in (
                              select se.profile_id from (
                                  select
                                      profile_id,
                                      max(action_date) as action_date
                                  from  oplati_analytic.bi_log_history group by profile_id) se
                                  join oplati_analytic.bi_log_history slh
                                		on se.profile_id = slh.profile_id  and se.action_date = slh.action_date
                                		where \"action\" = 'ADD'))- count(profile_id)) / (select count(profile_id) from oplati_analytic.bi_customers bc
                                    	where profile_id not in (
                                    		select
                                    		    se.profile_id
                                    		    from (
                                    		        select
                                    		            profile_id,
                                    		            max(action_date) as action_date
                                    		        from  oplati_analytic.bi_log_history group by profile_id) se
                                            		join oplati_analytic.bi_log_history slh
                                            		on se.profile_id = slh.profile_id  and se.action_date = slh.action_date
                                              where \"action\" = 'ADD'
                        	)),4) as non_act_pers
                            from (
                        		select * from (
                            		select distinct profile_id from oplati_analytic.bi_transactions_p2p  where sum<0
                          union distinct
                          select distinct profile_id from oplati_analytic.bi_transactions_in
                          union distinct
                          select distinct profile_id from oplati_analytic.bi_transactions_erip where status='COMPLETED'
                          union distinct
                          select distinct profile_id from oplati_analytic.bi_transactions_pos
                          union distinct
                          select distinct profile_id from oplati_analytic.bi_transactions_out
                          union distinct
                          select distinct profile_id from oplati_analytic.bi_transactions_vcard_out
                      )vvv
                    		where profile_id not in (
                				select se.profile_id from (
                				    select
                				        profile_id,
                				        max(action_date) as action_date
                				    from  oplati_analytic.bi_log_history group by profile_id) se
                    				join oplati_analytic.bi_log_history slh
                    				on se.profile_id = slh.profile_id  and se.action_date = slh.action_date
                    				where \"action\" = 'ADD')
                            )aa
                        ) total_c

                        left join(
                            with t_14 as (
                                SELECT
                                    date,
                                    sum(amount_nerez) over (order by date) as amount_nerez
                                from
                                    (SELECT
                                        DATE_TRUNC('day', open_date) AS date,
                                        count (distinct profile_id) as amount_nerez
                                    FROM oplati_analytic.bi_customers bc
                                    WHERE resident = 'Нерезидент' and
                                    profile_id not in (
                                  select
                                      se.profile_id
                                  from (
                                      select
                                          profile_id,
                                          max(action_date) as action_date
                                      from  oplati_analytic.bi_log_history group by profile_id) se
                                		join oplati_analytic.bi_log_history slh
                                		on se.profile_id = slh.profile_id  and se.action_date = slh.action_date
                                		where \"action\" = 'ADD'
                                	)
                                group by date)t
                            ) select (today()-1) as date, max(amount_nerez) as amount_nerez from t_14
                        ) total_ner
                        on total_c.report_date = total_ner.date

                        left join (
                            with t_13 as(
                                SELECT
                                    date,
                                    sum(amount) over (order by date) as clients_belkard
                                from
                                    (SELECT
                                        DATE_TRUNC('day', date) AS date,
                                        count (distinct profile_id) as amount
                                    FROM oplati_analytic.bi_virtual_mdes bc
                                    where date:: date > '2022-03-26'
                                    group by DATE_TRUNC('day', date),date)t
                            ) select * from t_13 where date::date = today()-1
                        ) total_belk
                        on total_c.report_date = total_belk.date

                        left join (
                            with t_12 as(
                                SELECT
                                    calendar_date as report_date,
                                    sum(amount) over (order by report_date) as act_clients_virtual
                                from oplati_analytic.spr_calendar
                                left join(
                                    SELECT
                                        open_date AS report_date,
                                        count(profile_id) AS amount
                                    FROM oplati_analytic.bi_customers
                                    WHERE ((profile_id in
                                        (SELECT DISTINCT profile_id
                                        FROM oplati_analytic.bi_transactions_vcard_out)))
                                    GROUP BY open_date) t
                                on calendar_date=t.report_date
                            ) select * from t_12
                            where report_date::date = today()-1) total_virt
                        on total_c.report_date = total_virt.report_date

                        left join (
                            with t_11 as (
                                SELECT
                                    report_date,
                                    sum(amount) over (order by report_date) as clients_in
                                from(
                                    SELECT
                                        open_date AS report_date,
                                        count(profile_id) AS amount
                                    FROM oplati_analytic.bi_customers
                                    WHERE ((profile_id in
                                        (SELECT DISTINCT profile_id FROM oplati_analytic.bi_transactions_in)))
                                    GROUP BY open_date
                                    )d
                            ) select * from t_11
                            where report_date::date = today()-1) act_in
                        on total_c.report_date = act_in.report_date

                        left join (
                            SELECT
                            	today()-1 AS report_date,
                                count(DISTINCT country) as total_country
                            FROM oplati_analytic.bi_customers
                            WHERE resident = 'Нерезидент' and open_date:: date< today()
                        ) z_ner
                        on total_c.report_date = z_ner.report_date

                        left join (
                            with t_16 as (
                                SELECT
                                    report_date,
                                    sum(amount) over (order by report_date) as erip_clients
                                from (
                                    SELECT
                                        open_date AS report_date,
                                        count(profile_id) AS amount
                                    FROM oplati_analytic.bi_customers
                                    WHERE ((profile_id in
                                        (SELECT DISTINCT profile_id
                                        FROM oplati_analytic.bi_transactions_erip
                                        WHERE status = 'COMPLETED')))
                                    GROUP BY open_date
                                ) g
                            ) select * from t_16 ttt
                            where report_date::date = today()-1
                        ) erip_c
                        on total_c.report_date = erip_c.report_date

                        left join (
                            with t_17 as (
                                SELECT
                                    report_date,
                                    sum(amount) over (order by report_date) as p2p_clients
                                from (SELECT
                                     open_date AS report_date,
                                        count(profile_id) AS amount
                                    FROM oplati_analytic.bi_customers
                                    WHERE ((profile_id in
                                      (SELECT DISTINCT profile_id
                                        FROM( SELECT
                                            trans_date,
                                            sum,
                                            bt.profile_id,
                                            purpose_pay,
                                            area,
                                            age_group
                                        FROM oplati_analytic.bi_transactions_p2p bt
                                        left join oplati_analytic.bi_customers bc
                                        on bt.profile_id=bc.profile_id) AS virtual_table)
                                    ))
                                GROUP BY open_date)rr
                            ) select * from t_17
                            where  report_date:: date = today()-1
                        ) p2p_c
                        on total_c.report_date = p2p_c.report_date

                        left join (
                            with t_18 as (
                                select
                                    calendar_date AS report_date,
                                    sum(amount) over (order by calendar_date) as group_wallet
                                from oplati_analytic.spr_calendar
                                left join
                                    (SELECT
                                        date_trunc('day', opened_on) AS date,
                                        count(distinct wallet_id) as amount
                                    FROM oplati_analytic.bi_group_wallet
                                    group by date
                                ) t
                                on calendar_date=t.date
                                group by calendar_date, amount
                            )
                            select * from t_18 ttt
                            where report_date:: date = today()-1
                        ) gr_wal
                        on total_c.report_date = gr_wal.report_date

                        left join (
                            with t_19 as (
                                select
                                	DATE_TRUNC('day', date_time) AS report_date,
                                	count(distinct id) as total_ticket
                                from oplati_analytic.bi_tickets bt
                                where date_time :: date = today()-1 and status = 1
                                group by DATE_TRUNC('day', date_time)
                            ) select * from t_19
                        ) total_tic
                        on total_c.report_date = total_tic.report_date

                        left join (
                            with t_20 as (
                                SELECT
                                    report_date,
                                    SUM(amount) OVER (ORDER BY report_date) as total_travel_card
                                FROM (
                                    SELECT
                                        DATE_TRUNC('day', date_time) AS report_date,
                                        COUNT(*) as amount
                                    FROM oplati_analytic.bi_travel_card
                                    WHERE status = 'PAID' AND
                                    toDate(date_begin) <= today()-1 AND
                                    toDate(date_end) > today()-1
                                    GROUP BY DATE_TRUNC('day', date_time)
                                ) rr
                            ) select * from t_20 ttt
                            where toDate(report_date) = today()-1
                        )t_travel
                        on total_c.report_date = t_travel.report_date

                        left join (
                            SELECT
                            	today()-1 AS report_date,
                                count(DISTINCT autopark_city) as total_city_vehicle
                            FROM oplati_analytic.bi_tickets
                            where date_time :: date < today()
                        )city_v
                        on total_c.report_date = city_v.report_date

                        left join (
                            SELECT
                                today()-1 AS report_date,
                                count(DISTINCT autopark_city) as active_city_week
                            FROM oplati_analytic.bi_tickets
                            WHERE date_time >= today()-7 AND date_time < today()
                        )city_week
                        on total_c.report_date = city_week.report_date

                        left join (
                            SELECT
                            	today() - 1 as report_date,
                            	count(DISTINCT autopark_city) city_travel_card
                            FROM oplati_analytic.bi_travel_card
                            where  date_time :: date < today()
                        )travel_city
                        on total_c.report_date = travel_city.report_date

                        left join (
                            SELECT
                            	today()-1 as report_date,
                             count(DISTINCT autopark_city) AS city_travel_card_month
                            FROM oplati_analytic.bi_travel_card
                            WHERE date_time >= today()-30 AND date_time < today()
                        ) active_travel
                        on total_c.report_date = active_travel.report_date

                        left join (
                            SELECT
                            	today()-1 as report_date,
                             round(sum(sum),2) as sum_pos_payments
                            FROM oplati_analytic.bi_pos_type bpt
                            where status = 1 and created_date < today()
                        ) active_pos_pay
                        on total_c.report_date = active_pos_pay.report_date

                        left join (
                            SELECT
                            	DATE_TRUNC('month', trans_date) as report_date,
                            	count(distinct profile_id) as in_unic_customers
                            FROM oplati_analytic.bi_transactions_in
                            where DATE_TRUNC('month', trans_date) = DATE_TRUNC('month', today()-1)
                            group by DATE_TRUNC('month', trans_date)
                        ) in_unic_p
                        on DATE_TRUNC('month',total_c.report_date) = DATE_TRUNC('month',in_unic_p.report_date)

                        left join (
                            SELECT
                            	DATE_TRUNC('month', trans_date) as report_date,
                            	count(distinct profile_id) filter (where purpose_pay <>'Произвольные платежи' ) as out_unic_customers,
                            	count(distinct profile_id) filter (where purpose_pay ='Произвольные платежи' ) as pp_unic_customers
                            FROM oplati_analytic.bi_transactions_out
                            where  DATE_TRUNC('month', trans_date) = DATE_TRUNC('month', today()-1)
                            group by DATE_TRUNC('month', trans_date)
                        ) out_unic_p
                        on DATE_TRUNC('month',total_c.report_date) = DATE_TRUNC('month',out_unic_p.report_date)

                        left join (
                            SELECT
                            	DATE_TRUNC('month', payment_date) as report_date,
                            	count(distinct profile_id) as erip_unic_customers
                            FROM oplati_analytic.bi_transactions_erip
                            where DATE_TRUNC('month', payment_date) = DATE_TRUNC('month', today()-1)
                            group by DATE_TRUNC('month', payment_date)
                        ) erip_unic_p
                        on DATE_TRUNC('month',total_c.report_date) = DATE_TRUNC('month',erip_unic_p.report_date)
                        order by total_c.report_date asc;"

  "tab_bi_agr_customers_p2p_monthly":
    overwrite_period: overwrite
    clickhouse_schema: oplati_views_report
    clickhouse_table: bi_agr_customers_p2p_monthly
    datetime_field: report_date
    recount_period: month
    clickhouse_query: "insert into oplati_views_report.bi_agr_customers_p2p_monthly
                        select
                         date_trunc('month',pol.trans_date) as report_date,
                            sum(pol.sum),
                            pol.area as pol_area,
                            otpr.area as otpr_area,
                            pol.age_group as pol_age,
                            otpr.age_group as otpr_age,
                            count(*) as amount
                        from
                            (SELECT
                                ops_id,
                                trans_date,
                                sum,
                                bt.profile_id as profile_id,
                                purpose_pay,
                                area,
                                age_group
                            FROM oplati_analytic.bi_transactions_p2p bt
                            left join oplati_analytic.bi_customers bc
                            on bt.profile_id=bc.profile_id
                            where sum>0 and DATE_TRUNC('month', trans_date) = DATE_TRUNC('month', today()-1)
                            ) pol
                        join
                         (SELECT
                            ops_id,
                            trans_date,
                            sum,
                            bt.profile_id as profile_id,
                            purpose_pay,
                            area,
                            age_group
                         FROM oplati_analytic.bi_transactions_p2p bt
                         left join oplati_analytic.bi_customers bc
                         on bt.profile_id=bc.profile_id
                         where sum<0 and DATE_TRUNC('month', trans_date) = DATE_TRUNC('month', today()-1)
                         ) otpr
                         on pol.ops_id=otpr.ops_id
                         group by
                            date_trunc('month',pol.trans_date),
                            pol.area,
                            otpr.area,
                            pol.age_group,
                            otpr.age_group
                         order by date_trunc('month',pol.trans_date) asc;"

  "tab_bi_agr_operation_p2p_monthly":
    overwrite_period: overwrite
    clickhouse_schema: oplati_views_report
    clickhouse_table: bi_agr_operation_p2p_monthly
    datetime_field: report_date
    recount_period: month
    clickhouse_query: "insert into oplati_views_report.bi_agr_operation_p2p_monthly
                        select * from (
                            SELECT
                                DATE_TRUNC('month', trans_date) as report_date,
                                pol_age AS pol_age,
                                case
                                  when sum>0
                                    and sum<5 then 'Меньше 5 р.'
                                  when sum>=5
                                    and sum<20 then '5-20 р.'
                                  when sum>=20
                                    and sum<100 then '20-100 р.'
                                  when sum>=100
                                    and sum<500 then '100-500 р.'
                                  when sum>=500 then '500 р. и больше'
                                  else '0'
                                end AS sum_categ,
                                count(*) AS amount_operation,
                                'Получаемые клиентами суммы по P2P' as type
                            FROM
                                (select
                                    pol.trans_date,
                                    pol.sum,
                                    pol.profile_id as id_pol,
                                    otpr.profile_id as id_otpr,
                                    pol.area as pol_area,
                                    otpr.area as otpr_area,
                                    pol.age_group as pol_age,
                                    otpr.age_group as otpr_age
                                from
                                    (SELECT
                                        ops_id,
                                        trans_date,
                                        sum,
                                        bt.profile_id as profile_id,
                                        purpose_pay,
                                        area,
                                        age_group
                                    FROM oplati_analytic.bi_transactions_p2p bt
                                    left join oplati_analytic.bi_customers bc on bt.profile_id=bc.profile_id
                                    where sum>0  and DATE_TRUNC('month', trans_date) = DATE_TRUNC('month', today()-1)
                                    ) pol
                                join
                                    (SELECT
                                        ops_id,
                                        trans_date,
                                        sum,
                                        bt.profile_id as profile_id,
                                        purpose_pay,
                                        area,
                                        age_group
                                    FROM oplati_analytic.bi_transactions_p2p bt
                                    left join oplati_analytic.bi_customers bc on bt.profile_id=bc.profile_id
                                    where sum<0 and DATE_TRUNC('month', trans_date) = DATE_TRUNC('month', today()-1)
                                ) otpr
                                on pol.ops_id=otpr.ops_id) AS virtual_table
                                GROUP BY
                                    pol_age,
                                    DATE_TRUNC('month', trans_date),
                                    case
                                      when sum>0
                                        and sum<5 then 'Меньше 5 р.'
                                      when sum>=5
                                        and sum<20 then '5-20 р.'
                                      when sum>=20
                                        and sum<100 then '20-100 р.'
                                      when sum>=100
                                        and sum<500 then '100-500 р.'
                                      when sum>=500 then '500 р. и больше'
                                      else '0'
                                    end

                                union all

                                SELECT
                                    DATE_TRUNC('month', trans_date) as report_date,
                                    otpr_age AS otpr_age,
                                    case
                                      when sum>0
                                        and sum<5 then 'Меньше 5 р.'
                                      when sum>=5
                                        and sum<20 then '5-20 р.'
                                      when sum>=20
                                        and sum<100 then '20-100 р.'
                                      when sum>=100
                                        and sum<500 then '100-500 р.'
                                      when sum>=500 then '500 р. и больше'
                                      else '0'
                                    end AS sum_categ,
                                    count(*) AS count,
                                    'Отправляемые клиентами суммы по P2P' as type
                                    FROM
                                        (select
                                            pol.trans_date,
                                            pol.sum,
                                            pol.profile_id as id_pol,
                                            otpr.profile_id as id_otpr,
                                            pol.area as pol_area,
                                            otpr.area as otpr_area,
                                            pol.age_group as pol_age,
                                            otpr.age_group as otpr_age
                                        from
                                            (SELECT
                                                ops_id,
                                                trans_date,
                                                sum,
                                                bt.profile_id as profile_id,
                                                purpose_pay,
                                                area,
                                                age_group
                                            FROM oplati_analytic.bi_transactions_p2p bt
                                            left join oplati_analytic.bi_customers bc
                                            on bt.profile_id=bc.profile_id
                                            where sum>0  and DATE_TRUNC('month', trans_date) = DATE_TRUNC('month', today()-1)
                                            ) pol
                                        join
                                            (SELECT
                                                ops_id,
                                                trans_date,
                                                sum,
                                                bt.profile_id as profile_id,
                                                purpose_pay,
                                                area,
                                                age_group
                                            FROM oplati_analytic.bi_transactions_p2p bt
                                            left join oplati_analytic.bi_customers bc
                                            on bt.profile_id=bc.profile_id
                                            where sum<0 and DATE_TRUNC('month', trans_date) = DATE_TRUNC('month', today()-1)
                                            ) otpr
                                        on pol.ops_id=otpr.ops_id) AS virtual_table
                                        GROUP BY
                                            otpr_age,
                                            DATE_TRUNC('month', trans_date),
                                            case
                                              when sum>0
                                                and sum<5 then 'Меньше 5 р.'
                                              when sum>=5
                                                and sum<20 then '5-20 р.'
                                              when sum>=20
                                                and sum<100 then '20-100 р.'
                                              when sum>=100
                                                and sum<500 then '100-500 р.'
                                              when sum>=500 then '500 р. и больше'
                                              else '0'
                                              end
                                    ) dsdd
                                    order by report_date asc;"

  "tab_bi_agr_sum_p2p_monthly":
    overwrite_period: overwrite
    clickhouse_schema: oplati_views_report
    clickhouse_table: bi_agr_sum_p2p_monthly
    datetime_field: report_date
    recount_period: month
    clickhouse_query: "insert into oplati_views_report.bi_agr_sum_p2p_monthly
                        SELECT
                            DATE_TRUNC('month', trans_date) AS report_date,
                            case
                              when sum>0
                                and sum<5 then 'Меньше 5 р.'
                              when sum>=5
                                and sum<20 then '5-20 р.'
                              when sum>=20
                                and sum<100 then '20-100 р.'
                              when sum>=100
                                and sum<500 then '100-500 р.'
                              when sum>=500 then '500 р. и больше'
                              else '0'
                              end AS sum_categ,
                            count(*) AS amount_operation,
                            round(sum(sum),2) as sum_total
                        FROM
                            (select
                                pol.trans_date,
                                pol.sum,
                                pol.profile_id as id_pol,
                                otpr.profile_id as id_otpr,
                                pol.area as pol_area,
                                otpr.area as otpr_area,
                                pol.age_group as pol_age,
                                otpr.age_group as otpr_age
                            from
                                (SELECT
                                    ops_id,
                                    trans_date,
                                    sum,
                                    bt.profile_id as profile_id,
                                    purpose_pay,
                                    area,
                                    age_group
                                FROM oplati_analytic.bi_transactions_p2p bt
                                left join oplati_analytic.bi_customers bc
                                on bt.profile_id=bc.profile_id
                                where sum>0  and DATE_TRUNC('month', trans_date) = DATE_TRUNC('month', today()-1)
                            ) pol
                            join
                                (SELECT
                                    ops_id,
                                    trans_date,
                                    sum,
                                    bt.profile_id as profile_id,
                                    purpose_pay,
                                    area,
                                    age_group
                                FROM oplati_analytic.bi_transactions_p2p bt
                                left join oplati_analytic.bi_customers bc
                                on bt.profile_id=bc.profile_id
                                where sum<0 and DATE_TRUNC('month', trans_date) = DATE_TRUNC('month', today()-1)
                            ) otpr
                            on pol.ops_id=otpr.ops_id) AS virtual_table

                        GROUP BY case
                            when sum>0
                                and sum<5 then 'Меньше 5 р.'
                            when sum>=5
                                and sum<20 then '5-20 р.'
                            when sum>=20
                                and sum<100 then '20-100 р.'
                            when sum>=100
                                and sum<500 then '100-500 р.'
                            when sum>=500 then '500 р. и больше'
                            else '0'
                            end,
                            DATE_TRUNC('month', trans_date)
                        order by DATE_TRUNC('month', trans_date) asc;"

  "tab_bi_agr_phones":
    overwrite_period: overwrite
    clickhouse_schema: oplati_views_report
    clickhouse_table: bi_agr_phones
    datetime_field: report_date
    recount_period: day
    clickhouse_query: "insert into oplati_views_report.bi_agr_phones
                        SELECT today()-1 AS report_date,
                    	brand AS brand,operation_system,
                        count(DISTINCT profile_id) AS \"Количество клиентов\"
                        FROM oplati_analytic.bi_virtual_phone
                        GROUP BY brand,operation_system;"

  "tab_bi_agr_pos_payments_monthly":
    overwrite_period: overwrite
    clickhouse_schema: oplati_views_report
    clickhouse_table: bi_agr_pos_payments_monthly
    datetime_field: report_date
    recount_period: month
    clickhouse_query: "insert into oplati_views_report.bi_agr_pos_payments_monthly select toDateTime(t_pos.__timestamp, 'UTC') as report_date,
                        round(sum_pos, 2) as sum_pos, round(t_pos.amount_pos, 2) as amount_pos,
                        amount_pos_wth_vehicle, round(sum_pos_parimatch, 2)
                        as sum_pos_parimatch, round(sum_pos_mts, 2) as sum_pos_mts,
                        round(avg_check, 2) as avg_check, round(avg_check_wth_vehicle, 2) as avg_check_wth_vehicle,
                        round(avg_check_vcard_out, 2) as avg_check_vcard_out,
                        pos_unic_customers, round(sum_pos_vehicle, 2) as sum_pos_vehicle,
                        round(amount_pos_vehicle, 2) as amount_pos_vehicle
                        from( SELECT DATE_TRUNC('month', created_date) AS __timestamp, sum(sum) AS sum_pos, count(distinct profile_id) as pos_unic_customers,
                        count(DISTINCT purchase_id) AS amount_pos, count(DISTINCT purchase_id) filter (where type_name <> 'Пассажирские перевозки') AS amount_pos_wth_vehicle,
                        sum(sum) filter (where org_id = 236278) AS sum_pos_parimatch, sum(sum) filter (where org_id = 613278) AS sum_pos_mts, AVG(sum) AS avg_check, AVG(sum) filter (where type_name <> 'Пассажирские перевозки') AS avg_check_wth_vehicle,
                        sum(sum) filter (where type_name = 'Пассажирские перевозки') AS sum_pos_vehicle,
                        count(DISTINCT purchase_id) filter (where type_name = 'Пассажирские перевозки') AS amount_pos_vehicle
                        FROM oplati_analytic.bi_pos_type_2023 bpt  where status = 1 and DATE_TRUNC('month', created_date) = DATE_TRUNC('month', today()-1)
                        group by DATE_TRUNC('month', created_date))t_pos left join( SELECT DATE_TRUNC('month', trans_date) AS report_date, AVG(sum) AS avg_check_vcard_out
                        FROM oplati_analytic.bi_transactions_vcard_out where DATE_TRUNC('month', trans_date) = DATE_TRUNC('month', today()-1)
                        GROUP BY DATE_TRUNC('month', trans_date) ORDER BY avg_check_vcard_out  DESC )vc_out on vc_out.report_date = t_pos.__timestamp order by t_pos.__timestamp asc;"

  "tab_bi_agr_vcard_group_amount":
    overwrite_period: overwrite
    clickhouse_schema: oplati_views_report
    clickhouse_table: bi_agr_vcard_group_amount
    datetime_field: report_date
    recount_period: month
    clickhouse_query: "insert into oplati_views_report.bi_agr_vcard_group_amount
                        select
                            date as report_date,
                         cat_count,
                         cat_sum,
                         count(profile_id) as client_amount
                        from
                        	(SELECT
                      DATE_TRUNC('month', trans_date) as date,
                      profile_id,
                         case
                           when count(*) <=5 then '0-5'
                           when count(*) >5
                             and count(*) <=10 then '5-10'
                           when count(*) >10
                             and count(*) <=50 then '10-50'
                           when count(*) >50
                             and count(*) <=100 then '50-100'
        	                  when count(*) >100 then ' 100 и более'
                         end as cat_count,
                         case
                           when sum(sum) <=10 then '0-10'
                           when sum(sum)>10
                             and sum(sum) <=50 then '10-50'
                           when sum(sum) >50
                             and sum(sum) <=100 then '50-100'
                           when sum(sum) >100 then ' 100 и более'
                         end as cat_sum
                         FROM oplati_analytic.bi_transactions_vcard_out
                         where DATE_TRUNC('month', trans_date) = DATE_TRUNC('month', today()-1)
                         GROUP BY DATE_TRUNC('month', trans_date), profile_id) t
    	                group by date, cat_count, cat_sum
                		order by date asc;"

  "tab_bi_agr_diff_amount":
    overwrite_period: overwrite
    clickhouse_schema: oplati_views_report
    clickhouse_table: bi_agr_diff_amount
    datetime_field: report_date
    recount_period: month
    clickhouse_query: "insert into oplati_views_report.bi_agr_diff_amount
                        with tab_diff as (
                          select
      	                    DATE_TRUNC('month', date) as report_date,
                            sum(sum) filter (where in_out='Пополнение')-sum(sum) filter (where in_out='Вывод') as diff_sum
                          from
                            (SELECT DATE_TRUNC('day', payment_date) as date,
                            sum(sum) as sum,
                            'Вывод' as in_out
                            FROM oplati_analytic.bi_transactions_erip
                            where case
                                  when lower(kontragent) ilike '%банк%'
                                    and lower(kontragent) not ilike '%небанк%' then 'Банк'
                                  else 'Другое'
                                  end = 'Банк'
                            and status='COMPLETED'
                            group by date
                            union all
                            SELECT
                                DATE_TRUNC('day', trans_date) as date,
                                sum(sum) as sum,
                                'Вывод' as in_out
                            FROM oplati_analytic.bi_transactions_out
                            where purpose_pay <>'Произвольные платежи'
                            group by date
                            union all
                            SELECT
                                DATE_TRUNC('day', trans_date) as date,
                                sum(sum) as sum,
                                'Пополнение' as in_out
                            FROM oplati_analytic.bi_transactions_in
                            group by date) t
                          group by DATE_TRUNC('month', date)
                          order by report_date asc
                        ) select
                            report_date,
                            round(diff_sum,2) as diff_sum
                        from  tab_diff
                        where DATE_TRUNC('month', report_date) = DATE_TRUNC('month', today()-1);"

  "tab_bi_agr_transaction_erip_monthly":
    overwrite_period: overwrite
    clickhouse_schema: oplati_views_report
    clickhouse_table: bi_agr_transaction_erip_monthly
    datetime_field: report_date
    recount_period: month
    clickhouse_query: "insert into oplati_views_report.bi_agr_transaction_erip_monthly
                    	select
                    	    report_date,
                      name_kontragent,
                      category,
                    		sum,
                      \"type\"
                    	from (
                         SELECT
                        	date_trunc('month', payment_date) as report_date,
                        	'Все контрагенты' as name_kontragent,
                        	case
                        	  when lower(purpose_pay) ilike '%vk.com%'
                             or lower(purpose_pay) ilike '%278 dia%'
                             or lower(purpose_pay) ilike '%tank%'
                             or lower(purpose_pay) ilike '%steam%'
                             or lower(purpose_pay) ilike '%bet%'
                             or lower(purpose_pay) ilike '%casino%'
                             or lower(purpose_pay) ilike '%win%'i
                             or lower(purpose_pay) ilike '%pari%'
                             or lower(purpose_pay) ilike '%pm.by%'
                             or lower(purpose_pay) ilike '%max%'
                             or lower(purpose_pay) ilike '%ваше лото%'
                             or lower(purpose_pay) ilike '%superloto%'
                             or lower(purpose_pay) ilike '%суперлото%'then 'Ставки, лотереи'
                           when lower(purpose_pay) ilike '%кредит%'
                             or lower(purpose_pay) ilike '%лизинг%'
                             or lower(purpose_pay) ilike '%овердрафт%' then 'Погашение кредита, лизинга, овердрафта'
                           when lower(purpose_pay) ilike '%пополн%'
                             or purpose_pay = 'A1 кошелек '
                             or upper(purpose_pay) ilike '%WMB%' then 'Пополнение счета/карты'
                           when upper(purpose_pay) ilike '%ОСГОВТС%'
                             or lower(purpose_pay) ilike '%банкомат%'
                             or lower(purpose_pay) ilike '%перевод%'
                             or lower(purpose_pay) ilike '%бюджет%'
                             or lower(purpose_pay) ilike '%задол%'
                             or lower(purpose_pay) ilike '%займ%'
                             or lower(purpose_pay) ilike '%налог%'
                             or lower(purpose_pay) ilike '%пошлина%'
                             or lower(purpose_pay) ilike '%штраф%'
                             or lower(purpose_pay) ilike '%взнос%'then 'Прочие финансовые операции'
                           when upper(purpose_pay) ilike '%МТС%'
                             or lower(purpose_pay) ilike '%телефон%'
                             or upper(purpose_pay) ilike '%A1%'
                             or lower(purpose_pay) ilike '%life%'
                             or lower(purpose_pay) ilike '%билайн%'
                             or lower(purpose_pay) ilike '%мегафон%'
                             or lower(purpose_pay) ilike '%теле2%'
                             or purpose_pay ilike '%ТВ%'
                             or lower(purpose_pay) ilike '%абон%'
                             or lower(purpose_pay) ilike '%интернет%'
                             or lower(purpose_pay) ilike '%byfly%'
                             or lower(purpose_pay) ilike '%voka%' then 'Мобильная связь, интернет, ТВ'
                           when lower(purpose_pay) ilike '%коммун%'
                             or lower(purpose_pay) ilike '%охрана%'
                             or lower(purpose_pay) ilike '%энерг%'
                             or lower(purpose_pay) ilike '%эл.эн.%'
                             or lower(purpose_pay) ilike '%снабжен%'
                             or upper(purpose_pay) ilike '%ЦИТ%'
                             or lower(purpose_pay) ilike '%обсл%'
                             or lower(purpose_pay) ilike '%газ%'
                             or lower(purpose_pay) ilike '%отоплен%'
                             or upper(purpose_pay) ilike '%РАСЧЕТ-ЖКУ%'
                             or lower(purpose_pay) ilike '%банк%'then 'Коммунальные платежи'
                           when lower(purpose_pay) ilike '%услуг%'
                             or lower(purpose_pay) ilike '%аренд%'
                             or lower(purpose_pay) ilike '%консульт%'
                             or lower(purpose_pay) ilike '%прокат%'
                             or lower(purpose_pay) ilike '%ремонт%'
                             or lower(purpose_pay) ilike '%оплата%'
                             or lower(purpose_pay) ilike '%помощь%'
                             or lower(purpose_pay) ilike '%работы%'
                             or lower(purpose_pay) ilike '%оформление%'
                             or lower(purpose_pay) ilike '%установка%'
                             or lower(purpose_pay) ilike '%бронирование%'
                             or lower(purpose_pay) ilike '%подбор%'
                             or lower(purpose_pay) ilike '%хранение%'
                             or lower(purpose_pay) ilike '%осмотр%'
                             or lower(purpose_pay) ilike '%содержание%'
                             or lower(purpose_pay) ilike '%проживание%'
                             or lower(purpose_pay) ilike '%уборка%'
                             or lower(purpose_pay) ilike '%регистрация%'
                             or lower(purpose_pay) ilike '%монтаж%' then 'Оплата услуг, аренды'
                           when lower(purpose_pay) ilike '%общеж%'
                             or lower(purpose_pay) ilike '%питан%'
                             or lower(purpose_pay) ilike '%обучен%'
                             or lower(purpose_pay) ilike '%курс%'
                             or lower(purpose_pay) ilike '%кружки%'
                             or lower(purpose_pay) ilike '%кружков%'
                             or lower(purpose_pay) ilike '%аттестация%'
                             or lower(purpose_pay) ilike '%дополнительн%'
                             or lower(purpose_pay) ilike '%заняти%'
                             or lower(purpose_pay) ilike '%экзамен%'
                             or lower(purpose_pay) ilike '%квалифик%'
                             or lower(purpose_pay) ilike '%подготовк%'
                             or lower(purpose_pay) ilike '%образоват%'
                             or lower(purpose_pay) ilike '%тестирование%'
                             or lower(purpose_pay) ilike '%пересдача%'
                             or lower(purpose_pay) ilike '%магистратура%'
                             or lower(purpose_pay) ilike '%мастер-класс%'
                             or lower(purpose_pay) ilike '%мискусство%'
                             or lower(purpose_pay) ilike '%тренинг%' then 'Образование и развитие'
                           when lower(purpose_pay) ilike '%.by%'
                             or lower(purpose_pay) ilike '%.бел%'
                             or lower(purpose_pay) ilike '%.com%'
                             or lower(purpose_pay) ilike '%.ru%' then 'Интернет-магазины'
                           else 'Другие платежи'
                         end AS category,
                         sum(sum) AS sum,
                         'Типы операций в ЕРИП' as type
                         FROM oplati_analytic.bi_transactions_erip
                         WHERE status = 'COMPLETED' and
                         DATE_TRUNC('month', payment_date) = DATE_TRUNC('month', today()-1)
                         GROUP BY case
                           when lower(purpose_pay) ilike '%vk.com%'
                             or lower(purpose_pay) ilike '%278 dia%'
                             or lower(purpose_pay) ilike '%tank%'
                             or lower(purpose_pay) ilike '%steam%'
                             or lower(purpose_pay) ilike '%bet%'
                             or lower(purpose_pay) ilike '%casino%'
                             or lower(purpose_pay) ilike '%win%'i
                             or lower(purpose_pay) ilike '%pari%'
                             or lower(purpose_pay) ilike '%pm.by%'
                             or lower(purpose_pay) ilike '%max%'
                             or lower(purpose_pay) ilike '%ваше лото%'
                             or lower(purpose_pay) ilike '%superloto%'
                             or lower(purpose_pay) ilike '%суперлото%'then 'Ставки, лотереи'
                           when lower(purpose_pay) ilike '%кредит%'
                             or lower(purpose_pay) ilike '%лизинг%'
                             or lower(purpose_pay) ilike '%овердрафт%' then 'Погашение кредита, лизинга, овердрафта'
                           when lower(purpose_pay) ilike '%пополн%'
                             or purpose_pay = 'A1 кошелек '
                             or upper(purpose_pay) ilike '%WMB%' then 'Пополнение счета/карты'
                           when upper(purpose_pay) ilike '%ОСГОВТС%'
                             or lower(purpose_pay) ilike '%банкомат%'
                             or lower(purpose_pay) ilike '%перевод%'
                             or lower(purpose_pay) ilike '%бюджет%'
                             or lower(purpose_pay) ilike '%задол%'
                             or lower(purpose_pay) ilike '%займ%'
                             or lower(purpose_pay) ilike '%налог%'
                             or lower(purpose_pay) ilike '%пошлина%'
                             or lower(purpose_pay) ilike '%штраф%'
                             or lower(purpose_pay) ilike '%взнос%'then 'Прочие финансовые операции'
                	          when upper(purpose_pay) ilike '%МТС%'
                             or lower(purpose_pay) ilike '%телефон%'
                             or upper(purpose_pay) ilike '%A1%'
                             or lower(purpose_pay) ilike '%life%'
                             or lower(purpose_pay) ilike '%билайн%'
                             or lower(purpose_pay) ilike '%мегафон%'
                             or lower(purpose_pay) ilike '%теле2%'
                             or purpose_pay ilike '%ТВ%'
                             or lower(purpose_pay) ilike '%абон%'
                             or lower(purpose_pay) ilike '%интернет%'
                             or lower(purpose_pay) ilike '%byfly%'
                             or lower(purpose_pay) ilike '%voka%' then 'Мобильная связь, интернет, ТВ'
                           when lower(purpose_pay) ilike '%коммун%'
                             or lower(purpose_pay) ilike '%охрана%'
                             or lower(purpose_pay) ilike '%энерг%'
                             or lower(purpose_pay) ilike '%эл.эн.%'
                             or lower(purpose_pay) ilike '%снабжен%'
                             or upper(purpose_pay) ilike '%ЦИТ%'
                             or lower(purpose_pay) ilike '%обсл%'
                             or lower(purpose_pay) ilike '%газ%'
                             or lower(purpose_pay) ilike '%отоплен%'
                             or upper(purpose_pay) ilike '%РАСЧЕТ-ЖКУ%'
                             or lower(purpose_pay) ilike '%банк%'then 'Коммунальные платежи'
                           when lower(purpose_pay) ilike '%услуг%'
                             or lower(purpose_pay) ilike '%аренд%'
                             or lower(purpose_pay) ilike '%консульт%'
                             or lower(purpose_pay) ilike '%прокат%'
                             or lower(purpose_pay) ilike '%ремонт%'
                             or lower(purpose_pay) ilike '%оплата%'
                             or lower(purpose_pay) ilike '%помощь%'
                             or lower(purpose_pay) ilike '%работы%'
                             or lower(purpose_pay) ilike '%оформление%'
                             or lower(purpose_pay) ilike '%установка%'
                             or lower(purpose_pay) ilike '%бронирование%'
                             or lower(purpose_pay) ilike '%подбор%'
                             or lower(purpose_pay) ilike '%хранение%'
                             or lower(purpose_pay) ilike '%осмотр%'
                             or lower(purpose_pay) ilike '%содержание%'
                             or lower(purpose_pay) ilike '%проживание%'
                             or lower(purpose_pay) ilike '%уборка%'
                             or lower(purpose_pay) ilike '%регистрация%'
                             or lower(purpose_pay) ilike '%монтаж%' then 'Оплата услуг, аренды'
                           when lower(purpose_pay) ilike '%общеж%'
                             or lower(purpose_pay) ilike '%питан%'
                             or lower(purpose_pay) ilike '%обучен%'
                             or lower(purpose_pay) ilike '%курс%'
                             or lower(purpose_pay) ilike '%кружки%'
                             or lower(purpose_pay) ilike '%кружков%'
                             or lower(purpose_pay) ilike '%аттестация%'
                             or lower(purpose_pay) ilike '%дополнительн%'
                             or lower(purpose_pay) ilike '%заняти%'
                             or lower(purpose_pay) ilike '%экзамен%'
                             or lower(purpose_pay) ilike '%квалифик%'
                             or lower(purpose_pay) ilike '%подготовк%'
                             or lower(purpose_pay) ilike '%образоват%'
                             or lower(purpose_pay) ilike '%тестирование%'
                             or lower(purpose_pay) ilike '%пересдача%'
                             or lower(purpose_pay) ilike '%магистратура%'
                             or lower(purpose_pay) ilike '%мастер-класс%'
                             or lower(purpose_pay) ilike '%мискусство%'
                             or lower(purpose_pay) ilike '%тренинг%' then 'Образование и развитие'
                           when lower(purpose_pay) ilike '%.by%'
                             or lower(purpose_pay) ilike '%.бел%'
                             or lower(purpose_pay) ilike '%.com%'
                             or lower(purpose_pay) ilike '%.ru%' then 'Интернет-магазины'
                           else 'Другие платежи'
                         end,date_trunc ('month', payment_date), type

                            union all

                         SELECT date_trunc ('month', payment_date) as report_date,
   		                case
                           when lower(kontragent) ilike '%белинвест%' then 'ОАО \"Белинвестбанк\"'
                           when lower(kontragent) ilike '%альфа%' then 'ЗАО \"Альфа-Банк\"'
                           when lower(kontragent) ilike '%белгазпромбанк%' then 'ОАО \"Белгазпромбанк\"'
                           when lower(kontragent) ilike '%мтбанк%'
                             or kontragent='ТБанк\"\" '
                             or lower(kontragent) ilike '%транзит%' then 'ЗАО \"МТБанк\"'
                           when lower(kontragent) ilike '%орбанк%'
                             or kontragent='БАНК\" ОАО\" ' then 'ОАО \"ПРИОРБАНК\"'
                           when lower(kontragent) ilike '%сбербанк%' then 'ОАО \"БПС-Сбербанк\"'
                           when lower(kontragent) ilike '%беларусбанк%' then 'ОАО \"Сберегательный банк \"Беларусбанк\"'
                           when lower(kontragent) ilike '%народный%' then 'ОАО \"Белорусский народный банк\"'
                           when lower(kontragent) ilike '%внешэконом%' then 'ОАО \"Белвнешэкономбанк\"'
                           when lower(kontragent) ilike '%агропром%' then 'ОАО \"Белагропромбанк\"'
                           when lower(kontragent) ilike '%решение%' then 'ЗАО \"Банк \"Решение\"'
                           when lower(kontragent) ilike '%идея%' then 'ЗАО \"Идея Банк\"'
                           when lower(kontragent) ilike '%дабрабыт%' then 'ОАО \"Банк Дабрабыт\"'
                           when lower(kontragent) ilike '%втб%' then 'ЗАО \"Банк ВТБ (Беларусь)\"'
                           when lower(kontragent) ilike '%ехнобанк%' then 'ОАО \"Технобанк\"'
                           when lower(kontragent) ilike '%статус%' then 'ОАО \"СтатусБанк\"'
                           when lower(kontragent) ilike '%паритет%' then 'ОАО \"Паритетбанк\"'
                           when lower(kontragent) ilike '%роста%' then 'ЗАО \"Банк роста и развития бизнеса\"'
                           when lower(kontragent) ilike '%бта%' then 'ЗАО \"БТА Банк\"'
                           when lower(kontragent) ilike '%бсб%' then 'ЗАО \"Белорусско-Швейцарский Банк \"БСБ Банк\"'
                           when lower(kontragent) ilike '%цептер%' then 'ЗАО \"Цептер Банк\"'
                           when lower(kontragent) ilike '%бнб%' then 'ОАО \"БНБ-Банк\"'
                           when lower(kontragent) ilike '%франса%' then 'ОАО \"Франсабанк\"'
                           when lower(kontragent) ilike '%реконверс%' then 'ЗАО \"Акционерный банк реконверсии и развития\"'
                           when lower(kontragent) ilike '%a1%' then 'Унитарное предприятие по оказанию услуг \"A1\"'
                           else kontragent
                         end AS name_kontragent,
                         purpose_pay AS category,
                         sum(sum) AS sum,
                         'Финансовые операции' as type
                         FROM oplati_analytic.bi_transactions_erip
                         WHERE  DATE_TRUNC('month', payment_date) = DATE_TRUNC('month', today()-1) and
                      case
                	          when lower(purpose_pay) ilike '%vk.com%'
                             or lower(purpose_pay) ilike '%278 dia%'
                             or lower(purpose_pay) ilike '%tank%'
                             or lower(purpose_pay) ilike '%steam%'
                             or lower(purpose_pay) ilike '%bet%'
                             or lower(purpose_pay) ilike '%casino%'
                             or lower(purpose_pay) ilike '%win%'
                             or lower(purpose_pay) ilike '%pari%'
                             or lower(purpose_pay) ilike '%pm.by%'
                             or lower(purpose_pay) ilike '%max%'
                             or lower(purpose_pay) ilike '%ваше лото%'
                             or lower(purpose_pay) ilike '%superloto%'
                             or lower(purpose_pay) ilike '%суперлото%'then 'Ставки, лотереи'
                           when lower(purpose_pay) ilike '%кредит%'
                             or lower(purpose_pay) ilike '%лизинг%'
                             or lower(purpose_pay) ilike '%овердрафт%' then 'Погашение кредита, лизинга, овердрафта'
                           when lower(purpose_pay) ilike '%пополн%'
                             or purpose_pay = 'A1 кошелек '
                             or upper(purpose_pay) ilike '%WMB%' then 'Пополнение счета/карты'
                           when upper(purpose_pay) ilike '%ОСГОВТС%'
                             or lower(purpose_pay) ilike '%банкомат%'
                             or lower(purpose_pay) ilike '%перевод%'
                             or lower(purpose_pay) ilike '%бюджет%'
                             or lower(purpose_pay) ilike '%задол%'
                             or lower(purpose_pay) ilike '%займ%'
                             or lower(purpose_pay) ilike '%налог%'
                             or lower(purpose_pay) ilike '%пошлина%'
                             or lower(purpose_pay) ilike '%штраф%'
                             or lower(purpose_pay) ilike '%взнос%'then 'Прочие финансовые операции'
                           when upper(purpose_pay) ilike '%МТС%'
                             or lower(purpose_pay) ilike '%телефон%'
                             or upper(purpose_pay) ilike '%A1%'
                             or lower(purpose_pay) ilike '%life%'
                             or lower(purpose_pay) ilike '%билайн%'
                             or lower(purpose_pay) ilike '%мегафон%'
                             or lower(purpose_pay) ilike '%теле2%'
                             or purpose_pay ilike '%ТВ%'
                             or lower(purpose_pay) ilike '%абон%'
                             or lower(purpose_pay) ilike '%интернет%'
                             or lower(purpose_pay) ilike '%byfly%'
                             or lower(purpose_pay) ilike '%voka%' then 'Мобильная связь, интернет, ТВ'
                           when lower(purpose_pay) ilike '%коммун%'
                             or lower(purpose_pay) ilike '%охрана%'
                             or lower(purpose_pay) ilike '%энерг%'
                             or lower(purpose_pay) ilike '%эл.эн.%'
                             or lower(purpose_pay) ilike '%снабжен%'
                             or upper(purpose_pay) ilike '%ЦИТ%'
                             or lower(purpose_pay) ilike '%обсл%'
                             or lower(purpose_pay) ilike '%газ%'
                             or lower(purpose_pay) ilike '%отоплен%'
                             or upper(purpose_pay) ilike '%РАСЧЕТ-ЖКУ%'
                             or lower(purpose_pay) ilike '%банк%'then 'Коммунальные платежи'
                           when lower(purpose_pay) ilike '%услуг%'
                             or lower(purpose_pay) ilike '%аренд%'
                             or lower(purpose_pay) ilike '%консульт%'
                             or lower(purpose_pay) ilike '%прокат%'
                             or lower(purpose_pay) ilike '%ремонт%'
                             or lower(purpose_pay) ilike '%оплата%'
                             or lower(purpose_pay) ilike '%помощь%'
                             or lower(purpose_pay) ilike '%работы%'
                             or lower(purpose_pay) ilike '%оформление%'
                             or lower(purpose_pay) ilike '%установка%'
                             or lower(purpose_pay) ilike '%бронирование%'
                             or lower(purpose_pay) ilike '%подбор%'
                             or lower(purpose_pay) ilike '%хранение%'
                             or lower(purpose_pay) ilike '%осмотр%'
                             or lower(purpose_pay) ilike '%содержание%'
                             or lower(purpose_pay) ilike '%проживание%'
                             or lower(purpose_pay) ilike '%уборка%'
                             or lower(purpose_pay) ilike '%регистрация%'
                             or lower(purpose_pay) ilike '%монтаж%' then 'Оплата услуг, аренды'
                           when lower(purpose_pay) ilike '%общеж%'
                             or lower(purpose_pay) ilike '%питан%'
                             or lower(purpose_pay) ilike '%обучен%'
                             or lower(purpose_pay) ilike '%курс%'
                             or lower(purpose_pay) ilike '%кружки%'
                             or lower(purpose_pay) ilike '%кружков%'
                             or lower(purpose_pay) ilike '%аттестация%'
                             or lower(purpose_pay) ilike '%дополнительн%'
                             or lower(purpose_pay) ilike '%заняти%'
                             or lower(purpose_pay) ilike '%экзамен%'
                             or lower(purpose_pay) ilike '%квалифик%'
                             or lower(purpose_pay) ilike '%подготовк%'
                             or lower(purpose_pay) ilike '%образоват%'
                             or lower(purpose_pay) ilike '%тестирование%'
                             or lower(purpose_pay) ilike '%пересдача%'
                             or lower(purpose_pay) ilike '%магистратура%'
                             or lower(purpose_pay) ilike '%мастер-класс%'
                             or lower(purpose_pay) ilike '%мискусство%'
                             or lower(purpose_pay) ilike '%тренинг%' then 'Образование и развитие'
                           when lower(purpose_pay) ilike '%.by%'
                             or lower(purpose_pay) ilike '%.бел%'
                             or lower(purpose_pay) ilike '%.com%'
                             or lower(purpose_pay) ilike '%.ru%' then 'Интернет-магазины'
                           else 'Другие платежи'
                         end = 'Пополнение счета/карты'
                         GROUP BY case
              when lower(kontragent) ilike '%белинвест%' then 'ОАО \"Белинвестбанк\"'
              when lower(kontragent) ilike '%альфа%' then 'ЗАО \"Альфа-Банк\"'
              when lower(kontragent) ilike '%белгазпромбанк%' then 'ОАО \"Белгазпромбанк\"'
              when lower(kontragent) ilike '%мтбанк%'
                   or kontragent='ТБанк\"\" '
                   or lower(kontragent) ilike '%транзит%' then 'ЗАО \"МТБанк\"'
              when lower(kontragent) ilike '%орбанк%'
                   or kontragent='БАНК\" ОАО\" ' then 'ОАО \"ПРИОРБАНК\"'
              when lower(kontragent) ilike '%сбербанк%' then 'ОАО \"БПС-Сбербанк\"'
              when lower(kontragent) ilike '%беларусбанк%' then 'ОАО \"Сберегательный банк \"Беларусбанк\"'
              when lower(kontragent) ilike '%народный%' then 'ОАО \"Белорусский народный банк\"'
              when lower(kontragent) ilike '%внешэконом%' then 'ОАО \"Белвнешэкономбанк\"'
              when lower(kontragent) ilike '%агропром%' then 'ОАО \"Белагропромбанк\"'
              when lower(kontragent) ilike '%решение%' then 'ЗАО \"Банк \"Решение\"'
              when lower(kontragent) ilike '%идея%' then 'ЗАО \"Идея Банк\"'
              when lower(kontragent) ilike '%дабрабыт%' then 'ОАО \"Банк Дабрабыт\"'
              when lower(kontragent) ilike '%втб%' then 'ЗАО \"Банк ВТБ (Беларусь)\"'
              when lower(kontragent) ilike '%ехнобанк%' then 'ОАО \"Технобанк\"'
              when lower(kontragent) ilike '%статус%' then 'ОАО \"СтатусБанк\"'
              when lower(kontragent) ilike '%паритет%' then 'ОАО \"Паритетбанк\"'
              when lower(kontragent) ilike '%роста%' then 'ЗАО \"Банк роста и развития бизнеса\"'
              when lower(kontragent) ilike '%бта%' then 'ЗАО \"БТА Банк\"'
              when lower(kontragent) ilike '%бсб%' then 'ЗАО \"Белорусско-Швейцарский Банк \"БСБ Банк\"'
              when lower(kontragent) ilike '%цептер%' then 'ЗАО \"Цептер Банк\"'
              when lower(kontragent) ilike '%бнб%' then 'ОАО \"БНБ-Банк\"'
              when lower(kontragent) ilike '%франса%' then 'ОАО \"Франсабанк\"'
              when lower(kontragent) ilike '%реконверс%' then 'ЗАО \"Акционерный банк реконверсии и развития\"'
              when lower(kontragent) ilike '%a1%' then 'Унитарное предприятие по оказанию услуг \"A1\"'
              else kontragent
          end,
          category,type,date_trunc ('month', payment_date)) t_erip;"

  "tab_bi_agr_transactions_out_monthly":
    overwrite_period: overwrite
    clickhouse_schema: oplati_views_report
    clickhouse_table: bi_agr_transactions_out_monthly
    datetime_field: report_date
    recount_period: month
    clickhouse_query: "insert into oplati_views_report.bi_agr_transactions_out_monthly
                        with tab_out as(
                         SELECT
                          report_date,
                          bib_erip,
    	                        sum(amount) over (partition by bib_erip order by report_date) as cum_sum,
    	                        out_unic_customers
   	                        FROM
                                (SELECT
     	                            DATE_TRUNC('month', payment_date) AS report_date,
                                    sum(sum) as amount,
                                    'ЕРИП' as bib_erip,
                                    count(distinct profile_id) as out_unic_customers
                                FROM oplati_analytic.bi_transactions_erip
                                where case
       		                    when lower(kontragent) ilike '%банк%'
       			                and lower(kontragent) not ilike '%небанк%' then 'Банк'
       		                    else 'Другое'
                                    end = 'Банк'
                                and status='COMPLETED'
                                group by report_date, bib_erip
                                union all
                                SELECT
      	                            DATE_TRUNC('month', trans_date) AS report_date,
                                    sum (sum) as amount,
                                    'БИБ' as bib_erip,
                                    count(distinct profile_id) as out_unic_customers
                                FROM oplati_analytic.bi_transactions_out
                                where purpose_pay <>'Произвольные платежи'
                                group by report_date, bib_erip
                                ) AS expr_qry
                            order by report_date asc
                        ) select
                        	report_date,
                        	bib_erip,
                        	round(cum_sum,2) as sum_out,
                        	out_unic_customers
                        from tab_out
                        where DATE_TRUNC('month', report_date) = DATE_TRUNC('month', today()-1);"

  "tab_bi_agr_parimatch_p2p":
    clickhouse_query: "insert into oplati_views_report.bi_agr_parimatch_p2p
                        select p_parim.report_date, payout_parimatch, vcard_in_p2p
                        from (
                            SELECT DATE_TRUNC('day', trans_date) AS report_date,
                            round(sum(sum),2) AS payout_parimatch
                            FROM oplati_analytic.bi_transactions_payout_pos
                            where kontragent <>'РУП \"БЕЛОРУССКИЕ ЛОТЕРЕИ\"'
                                and  trans_date ::date = today()-1
                            GROUP BY DATE_TRUNC('day', trans_date)
                        ) p_parim

                        left join (
                            SELECT DATE_TRUNC('day', trans_date) AS report_date,
                            round(sum(sum),2) as vcard_in_p2p
                            FROM oplati_analytic.bi_transactions_vcard_in
                            WHERE purpose_pay = 'Перевод на карту' and trans_date ::date = today()-1
                            GROUP BY DATE_TRUNC('day', trans_date)
                        )v_in
                        on v_in.report_date = p_parim.report_date
                        order by p_parim.report_date asc;"

  "tab_bi_agr_card_system":
    overwrite_period: overwrite
    clickhouse_schema: oplati_views_report
    clickhouse_table: bi_agr_card_system
    datetime_field: report_date
    recount_period: month
    clickhouse_query: "insert into oplati_views_report.bi_agr_card_system
                        SELECT
                      DATE_TRUNC('month', trans_date) AS report_date,
                      accept_brand AS accept_brand,
                            round(sum(sum),2) AS sum_in,
                            case
  	                  when kontragent = 'Российский банк' then 'Банки РФ'
  	                  when (kontragent is null or kontragent = 'Нет данных')
  	                    and payer  = 'Международный перевод' then 'Иные банки'
  	                else 'Банки РБ'
                      end type_bank
                        FROM oplati_analytic.bi_transactions_in
                        WHERE
                      case
                              when purpose_in='Перевод с карты 3d-secure'
                                or purpose_in='Перевод с чужой карты'
                                or purpose_in='Перевод с карты Белкард' then 'Пополнение с карты'
                            end = 'Пополнение с карты'
                           and DATE_TRUNC('month', trans_date) = DATE_TRUNC('month', today()-1)
                        GROUP BY accept_brand,DATE_TRUNC('month', trans_date),type_bank
                        ORDER BY report_date asc;"

  "tab_bi_agr_card_bank":
    overwrite_period: overwrite
    clickhouse_schema: oplati_views_report
    clickhouse_table: bi_agr_card_bank
    datetime_field: report_date
    recount_period: month
    clickhouse_query: "insert into oplati_views_report.bi_agr_card_bank
                        SELECT
                            DATE_TRUNC('month', trans_date) AS report_date,
                            kontragent AS kontragent,
                            round(sum(sum),2) AS sum_in
                        FROM oplati_analytic.bi_transactions_in
                        where
                        case
                          when purpose_in='Перевод с карты 3d-secure'
                            or purpose_in='Перевод с чужой карты'
                            or purpose_in='Перевод с карты Белкард' then 'Пополнение с карты'
                          when purpose_in ilike '%друга%' then 'Награда'
                          when purpose_in ilike '%Белинвестбанк%' then 'Карта Белинвестбанка'
                          when purpose_in='Перевод с текущего счета'
                            and (type_in_name not ilike '%счет%'
                            and type_in_name not ilike '%Возвраты%'
                            and type_in_name not ilike '%Прочее%') then 'Зарплата'
                          when purpose_in='Перевод с текущего счета'
                            and (type_in_name ilike '%счет%'
                                or type_in_name ilike '%Возвраты%'
                                or type_in_name ilike '%Прочее%') then 'Текущий счет'
                        else purpose_in
                        end = 'Пополнение с карты'
                        and DATE_TRUNC('month', trans_date) = DATE_TRUNC('month', today()-1)
                        GROUP BY kontragent,DATE_TRUNC('month', trans_date)
                        ORDER BY report_date asc;"

  "tab_bi_agr_foreign_country":
    overwrite_period: overwrite
    clickhouse_schema: oplati_views_report
    clickhouse_table: bi_agr_foreign_country
    datetime_field: report_date
    recount_period: day
    clickhouse_query: "insert into oplati_views_report.bi_agr_foreign_country
                        select * from (
                            SELECT today()-1 as report_date, country AS country,
                            count(DISTINCT profile_id) AS \"Количество клиентов\"
                            FROM oplati_analytic.bi_customers
                            GROUP BY country) ddd

                        left join (
                            SELECT country AS new_country,
                            DATE_TRUNC('day', open_date) AS open_date
                            FROM oplati_analytic.bi_customers
                            WHERE open_date >= today()-180
                            AND open_date < today()
                            AND ((country in
                                (SELECT distinct country
                                FROM oplati_analytic.bi_customers
                                GROUP BY country
                                HAVING (count(profile_id) =1))))
                            GROUP BY country, DATE_TRUNC('day', open_date), open_date) sss
                        on ddd.country = sss.new_country;"

  "tab_bi_agr_customer":
    clickhouse_query: "insert into oplati_views_report.bi_agr_customer
                        SELECT  open_date, area AS area, age_group AS age_group, COUNT(*) AS customer_amount
                        FROM oplati_analytic.bi_customers
                        where open_date :: date = today()-1 and
                     profile_id not in (
                  select se.profile_id from (
                      select profile_id, max(action_date) as action_date
                      from  oplati_analytic.bi_log_history group by profile_id) se
                  join oplati_analytic.bi_log_history slh
                  on se.profile_id = slh.profile_id  and se.action_date = slh.action_date
                  where \"action\" = 'ADD')
                     GROUP BY area,age_group,open_date;"

# proc_15_agr_clickhouse

  "tab_bi_agr_transaction_p2p_monthly":
    overwrite_period: overwrite
    clickhouse_schema: oplati_views_report
    clickhouse_table: bi_agr_transaction_p2p_monthly
    datetime_field: report_date
    recount_period: month
    clickhouse_query: "insert into oplati_views_report.bi_agr_transaction_p2p_monthly
                	    SELECT 
			              DATE_TRUNC('month', bt.trans_date) as report_date,
			              round(sum(sum),2) as sum_p2p,
		  	              count(bt.profile_id) as operation_amount,
		                  unic_client,
		                  purpose_pay
		                FROM oplati_analytic.bi_transactions_p2p bt
		                left join (
			              select
			                DATE_TRUNC('month', trans_date) as report_date,
			                count(distinct profile_id) as unic_client
			              from oplati_analytic.bi_transactions_p2p
			              group by DATE_TRUNC('month', trans_date) 
		                ) bc 
		                on DATE_TRUNC('month', bt.trans_date)=bc.report_date
		                where sum>0
		                  and DATE_TRUNC('month', bt.trans_date) = DATE_TRUNC('month', today() - 1)
		                group by 
			              DATE_TRUNC('month', bt.trans_date),
		                  purpose_pay,
		                  unic_client
		                order by DATE_TRUNC('month', trans_date) asc;"

  "tab_bi_agr_transactions_vcard_daily":
    clickhouse_query: "insert into oplati_views_report.bi_agr_transactions_vcard_daily 
                        SELECT 
                          new_virt.report_date,
                          new_client,
                          ROUND(sum_virtual, 2) AS sum_virtual,
                          new_virt.amount_virtual,
                          client_amount,
                          ROUND(sum_virtual_nfc, 2) AS sum_virtual_nfc,
                          client_amount_nfc 
                        FROM (
                          SELECT
                            DATE_TRUNC('day', trans_date) AS report_date,
                            SUM(sum) AS sum_virtual,
                            COUNT(*) AS amount_virtual,
                            COUNT(DISTINCT profile_id) AS client_amount
                          FROM oplati_analytic.bi_transactions_vcard_out
                          WHERE trans_date::date = today() - 1
                          GROUP BY DATE_TRUNC('day', trans_date)
                          ) AS new_virt
                          LEFT JOIN (
                            SELECT
                              DATE_TRUNC('day', date) AS report_date,
                              COUNT(DISTINCT profile_id) AS new_client
                              FROM oplati_analytic.bi_virtual_mdes 
                              WHERE \"date\"::date = today() - 1
                              GROUP BY DATE_TRUNC('day', date)
                          ) s_virt ON new_virt.report_date = s_virt.report_date
                          LEFT JOIN (
                            SELECT
                              DATE_TRUNC('day', trans_date) AS report_date,
                              SUM(sum) AS sum_virtual_nfc,
                              COUNT(DISTINCT profile_id) AS client_amount_nfc
                            FROM oplati_analytic.bi_transactions_bpay_nfc 
                            WHERE trans_date::date = today() - 1
                            AND status IN (1,3,7)
                            GROUP BY DATE_TRUNC('day', trans_date)
                          ) btbn ON new_virt.report_date = btbn.report_date;"

  "tab_bi_agr_pos_payments_daily":
    clickhouse_query: "insert into oplati_views_report.bi_agr_pos_payments_daily
                        SELECT
                          DATE_TRUNC('day', created_date) AS report_date,
						  case
							when device_id in (8499,9411,39777,38243,25763,39294,39986,38983,39781,47107,47108,48091,41319, 50670,46116,49332, 49331,48377,51237,41320) then 'Гэмблинг и беттинг'
							when bpt.itn in ('690362737' ,'100341433','400051902','191112998') then 'АЗС(заправки)'
							else bo.name 
						  end as bet_type,
		     			  round(sum(sum), 2) as sum
						FROM oplati_analytic.bi_pos_type_2023 bpt
						left join oplati_analytic.bi_organisation bo 
						on bo.profile_id = bpt.org_id 
						where status = 1 and created_date ::date = today() - 1
						GROUP BY
							DATE_TRUNC('day', created_date),
							case 
								when  device_id in (8499,9411,39777,38243,25763,39294,39986,38983,39781,47107,47108,48091,41319, 50670,46116,49332, 49331,48377,51237,41320) then 'Гэмблинг и беттинг'
								when  bpt.itn in ('690362737' ,'100341433','400051902','191112998') then 'АЗС(заправки)'
								else bo.name 
							end 
						order by DATE_TRUNC('day', created_date) asc;"

  "tab_bi_agr_transactions_out":
    clickhouse_query: "insert into oplati_views_report.bi_agr_transactions_out 
                		SELECT 
			              toDate(payment_date) AS report_date,
		                  case
		                    when bib_erip='ЕРИП' then 'ЕРИП'
		                    else purpose_pay
		                  end AS name_pay,
		                  case 
		    	            when round(sum(out_sum),2) is null then 0 else round(sum(out_sum),2) 
		                  end as sum_out,
		                  case 
		    	            when sum(trans_amount) is null then 0 else sum(trans_amount) 
		   	              end  as amount_out,
		   	              case 
		    	            when round(sum(sum_loan),2) is null then 0 else round(sum(sum_loan),2)
		                  end as sum_out_loan,
		                  case 
		    	            when sum(amount_loan) is null then 0 else sum(amount_loan)
		                  end as amount_out_loan
		                from (
                			SELECT 
				              payment_date::date as payment_date,
				              sum(sum) as out_sum,
				              purpose_pay,
		                      'ЕРИП' as bib_erip,
		                      count(*) as trans_amount,
		                      sum(sum) filter (where profile_id in (
		        	            select distinct profile_id
		        	            from oplati_analytic.bi_transactions_in
		        	            where type_in_name = 'Перечисление кредитных средств')
		                      ) AS sum_loan,
		    	              count(CASE 
            		            WHEN profile_id IN (
                		          select distinct profile_id
		                          from oplati_analytic.bi_transactions_in
        		                  where type_in_name = 'Перечисление кредитных средств'
            		            ) THEN 1 
		                        ELSE NULL 
        		              END) as amount_loan
			                FROM oplati_analytic.bi_transactions_erip
			                where status='COMPLETED'
			                and payment_date :: date  = today() - 1
			                and case
		   			          when 
		   				        lowerUTF8(purpose_pay) ilike '%пополн%'
					            or purpose_pay = 'A1 кошелек '
		                        or upperUTF8(purpose_pay) ilike '%WMB%' then 'Пополнение счета/карты'
		                        else 'Другое'
				              end !='Другое'
                			group by payment_date, purpose_pay

			                union all 
		   
			                SELECT
    			              trans_date::date as payment_date,
    			              sum(sum) as out_sum,
    			              purpose_pay,
    			              'БИБ' as bib_erip,
    			              count(*) as trans_amount,
    			              sum(sum) filter (where profile_id in (
        			            select distinct profile_id
        			            from oplati_analytic.bi_transactions_in
        			            where type_in_name = 'Перечисление кредитных средств')
    			              ) AS sum_loan,
    			              count(CASE WHEN profile_id IN (
            			        select distinct profile_id
            			        from oplati_analytic.bi_transactions_in
            			        where type_in_name = 'Перечисление кредитных средств'
       			              ) THEN 1 ELSE NULL END) AS amount_loan
			                FROM oplati_analytic.bi_transactions_out
			                WHERE trans_date::date = today() - 1
			                GROUP BY trans_date::date, purpose_pay
			                ) AS virtual_table
                    		group by toDate(payment_date),
		                    case
		                      when bib_erip='ЕРИП' then 'ЕРИП'
		                      else purpose_pay
		                    end 
		                    order by toDate(payment_date) asc;"

  "tab_bi_agr_transaction_in_daily":
    clickhouse_query: "insert into oplati_views_report.bi_agr_transaction_in_daily
                    	SELECT 
                          date_trunc('day', trans_date) AS report_date, 
                          CASE
                            WHEN payer = 'Международный перевод (Тинькофф)' THEN 'Международный перевод (Тинькофф)'
                            WHEN purpose_in IN ('Перевод с карты 3d-secure', 'Перевод с чужой карты', 'Перевод с карты Белкард') AND payer IS NULL THEN 'Пополнение с карты'
                            WHEN purpose_in ILIKE '%друга%' THEN 'Награда'
                            WHEN purpose_in ILIKE '%Белинвестбанк%' THEN 'Карта Белинвестбанка'
                            WHEN (date_trunc('day', trans_date) >= '2021-06-01' 
                              AND purpose_in = 'Перевод с текущего счета' 
                              AND type_in_name != 'Перевод с текущего счета' 
                              AND type_in_name != 'Перечисление кредитных средств'
                              AND pan NOT IN ('511111111', '999999999')
                              AND payer NOT ILIKE '%Международный перевод%') THEN 'Зарплата'
                            WHEN purpose_in = 'Перевод с текущего счета'
                              AND (type_in_name ILIKE '%счет%' 
                              OR type_in_name ILIKE '%Возвраты%' 
                              OR pan IN ('511111111', '999999999') 
                              OR type_in_name ILIKE '%Прочее%') THEN 'Текущий счет'
                            WHEN purpose_in ILIKE '%Манибэк%' THEN 'Пополнение ''Манибэк'''
                            WHEN payer = 'Международный перевод' THEN 'Международный перевод'
                            WHEN type_in_name ILIKE '%Перечисление кредитных средств%' THEN 'Кредиты'
                            ELSE purpose_in
                          END AS type_in,
                          round(sum(sum), 2) AS sum_in,
                          COUNT(DISTINCT trans_id) AS amount_in 
                        FROM oplati_analytic.bi_transactions_in
                        WHERE trans_date::date = today() - 1
                        GROUP BY report_date, type_in
                        ORDER BY report_date DESC;"

  "tab_bi_agr_account_balance":
    clickhouse_query: "insert into oplati_views_report.bi_agr_account_balance
                		select
			              acc_sum.report_date,
			              avg_sum_bal,
			              balance_summary,
			              avg_sum_mds,
			              balance_mdes,
			              avg_sum_loan,
			              balance_loan
		                from (
		                SELECT date_trunc('day', balance_date) AS report_date,
		                  sum(bal_sum) AS balance_summary,
    		              sum(avg_sum)/2 as avg_sum_bal
		                FROM oplati_analytic.bi_customer_balance 
		                where balance_date :: date = today() - 1 
		                GROUP BY DATE_TRUNC('day', balance_date)
		                ) acc_sum
                		left join (
		                  SELECT DATE_TRUNC('day', balance_date) AS report_date,
		                    sum(bal_sum)AS balance_mdes,
		                    sum(avg_sum/2) as avg_sum_mds 
		                  FROM oplati_analytic.bi_account_balance_mdes rrr
		                  where balance_date ::date = today() - 1 
		                  GROUP BY DATE_TRUNC('day', balance_date)
		                ) acc_mdes
		                on acc_sum.report_date = acc_mdes.report_date
		                left join (
			              select balance_date,
				            round((sum(balance_sum)/count(distinct profile_id)),2) as avg_sum_loan,
				            round(sum(balance_sum),2) as balance_loan 
			                from analytic_stage_level.stg_account_balance stb 
			                left join oplati_analytic.bi_wallet bw 
			                on stb.account_id  = bw.wallet_id 
			                where profile_id in (
				              select distinct profile_id
				              from oplati_analytic.bi_transactions_in
				              where type_in_name = 'Перечисление кредитных средств'
			                )
			                and wallet_type<>8
			                and balance_date::date = today()-1 
			                group by balance_date
		                )loan_sum
		                on acc_sum.report_date = loan_sum.balance_date
		                order by acc_sum.report_date asc;"


# proc_20_agr_customer_nerez

  "tab_bi_agr_request_data_nerez_daily":
    clickhouse_query: "insert into oplati_views_report.bi_agr_request_data_nerez_daily
                        select DATE_TRUNC('day', request_date) as report_date,
                          count(*) as amount_application,
                          request_type,
                          status,
                          residency
                        from oplati_analytic.bi_request_data_rezidency
                        where DATE_TRUNC('day', request_date) = DATE_TRUNC('day', today()-1)
                        group by request_date, request_type, status, residency
                        order by report_date asc;"

################################################# ACTIVITY ##########################################################

  "tab_dim_activity_vehicle_daily":
    overwrite_period: overwrite
    clickhouse_schema: analytic_dimention_level
    clickhouse_table: dim_activity_vehicle_daily
    datetime_field: date
    recount_period: day
    clickhouse_query: "insert into analytic_dimention_level.dim_activity_vehicle_daily			
			            select mns.date,
			             (mns.active+reg.active) as active,
			             (mns.cum_sum+reg.cum_sum) as \"every\"  
			            from (	
				            select \"date\", active,cum_sum 
				            from (
					            SELECT 
						            DATE_TRUNC('day', date_time) AS date, 
					                count(DISTINCT vehicle_id) as active, 
					                sum(amount) over (order by DATE_TRUNC('day', date_time)) as cum_sum  
					            FROM oplati_analytic.bi_tickets
					            left join (
						            SELECT 
							            DATE_TRUNC('day', open_date) AS date,
					                    count(distinct id) as amount
					                FROM oplati_analytic.spr_minsktrans_vehicle
					                group by date
					            )  t2
					            on DATE_TRUNC('day', date_time)=t2.date
					            where autopark_id = 385 and status  = 1
					            GROUP BY DATE_TRUNC('day', date_time), amount
            				) sss
			            ) mns,
			            (
				        select \"date\", active,
					        (select count(id) from oplati_analytic.spr_vehicle_type where \"name\" = 'other') as cum_sum 
				        from (
					        SELECT DATE_TRUNC('day', date_time) AS date, count(DISTINCT vehicle_id) as active  
					        FROM oplati_analytic.bi_tickets  
		    			    where autopark_id <> 385 and status  = 1
			    		    GROUP BY DATE_TRUNC('day', date_time)
        				) ddd
			            ) reg
            			where mns.date = reg.date and mns.date = today() - 1;"

  "tab_dim_activity_vehicle_monthly":
    overwrite_period: overwrite
    clickhouse_schema: analytic_dimention_level
    clickhouse_table: dim_activity_vehicle_monthly
    datetime_field: date
    recount_period: day
    clickhouse_query: "insert into analytic_dimention_level.dim_activity_vehicle_monthly
			            select
			                mns.date,
			                (mns.active+reg.active) as active,
			                (mns.cum_sum+reg.cum_sum) as \"every\"  
			            from (	
				            select
				                \"date\", active, cum_sum
                            from (
					            SELECT 
						            DATE_TRUNC('month', date_time) AS date, 
					                count(DISTINCT vehicle_id) as active, 
					                sum(amount) over (order by DATE_TRUNC('month', date_time)) as cum_sum  
					            from oplati_analytic.bi_tickets  
					            left join (
						  	        SELECT 
						  		        DATE_TRUNC('month', open_date) AS date,
						                count(distinct id) as amount
						            FROM oplati_analytic.spr_minsktrans_vehicle
						            group by date
					            )  t2
					            on DATE_TRUNC('month', date_time)=t2.date
					            where autopark_id = 385 and status  = 1
					            GROUP by DATE_TRUNC('month', date_time), amount
				            ) sss
			            ) mns,
            			(select 
					        \"date\", 
					        active,
					        (select count(id) 
						    from oplati_analytic.spr_vehicle_type 
						    where \"name\" = 'other'
					        )  as cum_sum 
				        from (
					        SELECT 
						        DATE_TRUNC('month', date_time) AS date, 
						        count(DISTINCT vehicle_id) as active  
					        FROM oplati_analytic.bi_tickets  
					        where autopark_id <> 385 and status  = 1
					        GROUP BY DATE_TRUNC('month', date_time)
        				) ddd
			            ) reg
            			where mns.date = reg.date;"

  "tab_dim_activity_vehicle_quarterly":
    overwrite_period: overwrite
    clickhouse_schema: analytic_dimention_level
    clickhouse_table: dim_activity_vehicle_quarterly
    datetime_field: date
    recount_period: day
    clickhouse_query: "insert into analytic_dimention_level.dim_activity_vehicle_quarterly
			            select
			                mns.date,
			                (mns.active+reg.active) as active,
			                (mns.cum_sum+reg.cum_sum) as \"every\"  
			            from (	
				            select
				                \"date\",
				                 active,
				                 cum_sum
				            from (
					            SELECT 
						            date_trunc('quarter', date_time) AS date, 
					                count(DISTINCT vehicle_id) as active, 
					                sum(amount) over (order by date_trunc('quarter', date_time)) as cum_sum  
					            FROM oplati_analytic.bi_tickets  
					            left join (
					  	            SELECT 
					  	                date_trunc('quarter', open_date) AS date,
					                    count(distinct id) as amount
					   	            FROM oplati_analytic.spr_minsktrans_vehicle
					   	            group by date
					            )  t2
					            on date_trunc('quarter', date_time) = t2.date
					            where  autopark_id = 385 and status  = 1
					            GROUP BY date_trunc('quarter', date_time), amount
                			) sss
			            ) mns,   
			            (select
			                   \"date\",
			                    active,
			                    (select count(id)
			                     from oplati_analytic.spr_vehicle_type where \"name\" = 'other') as cum_sum 
				           from (	
					           SELECT 
						           DATE_TRUNC('quarter', date_time) AS date, 
						           count(DISTINCT vehicle_id) as active  
					           FROM oplati_analytic.bi_tickets  
					           where autopark_id <> 385 and status  = 1
					           GROUP BY DATE_TRUNC('quarter', date_time)
				           ) ddd
			               ) reg
                		where mns.date = reg.date;"

  "tab_bi_activity_vehicle_daily":
    clickhouse_query: "insert into oplati_views_report.bi_activity_vehicle_daily			
			            select * from analytic_dimention_level.dim_activity_vehicle_daily;"

  "tab_bi_activity_vehicle_monthly":
    overwrite_period: overwrite
    clickhouse_schema: oplati_views_report
    clickhouse_table: bi_activity_vehicle_monthly
    datetime_field: date
    recount_period: day
    clickhouse_query: "insert into oplati_views_report.bi_activity_vehicle_monthly			
			            select * from analytic_dimention_level.dim_activity_vehicle_monthly;"

  "tab_bi_activity_vehicle_quarterly":
    overwrite_period: overwrite
    clickhouse_schema: oplati_views_report
    clickhouse_table: bi_activity_vehicle_quarterly
    datetime_field: date
    recount_period: day
    clickhouse_query: "insert into oplati_views_report.bi_activity_vehicle_quarterly			
			            select * from analytic_dimention_level.dim_activity_vehicle_quarterly;"

  "tab_bi_activity_poi_daily":
    clickhouse_query: "insert into oplati_views_report.bi_activity_poi_daily
                        SELECT 
				            DATE_TRUNC('day', date) AS \"date\",
				            'Транспорт' as name,
			                sum(active) AS amount_active,
			                every,
			                sum(active) / sum(every) AS active_per
            			FROM analytic_dimention_level.dim_activity_vehicle_daily 	
			            WHERE date = today() - 1
			            GROUP BY \"date\",every
			
			            union all
			
			            SELECT
			                DATE_TRUNC('day', create_date) AS \"date\",
			                name AS name,
			                (count(DISTINCT pump_id)) :: Int64 AS amount_active,
			                (max(azs_num_pump)) :: Int64 as every,
			                (count(distinct pump_id)) :: Int64/(max(azs_num_pump)) :: Int64 AS active_per
			            FROM
			                (select create_date,
			                    t1.company_id,
			                    t1.station_id,
			                    case
			                        when t1.company_id=1 then 'А-100 (колонки)'
			                        when t1.company_id=2 then 'Белоруснефть (колонки)'
			                        when t1.company_id=3 then 'United Company (колонки)'
			                    end as name,
			                    t1.pump,
			                    pump_id,
			                    num_pump,
			                    azs_num_pump
			                from oplati_analytic.bi_azs_petrol_sale t1
			                left join (
			                    select
			                        company_id,
			                        station_id,
			                        max(pump) as num_pump
			                    from oplati_analytic.bi_azs_petrol_sale
			                    group by company_id, station_id
			                ) t2
			                on t1.company_id=t2.company_id and t1.station_id=t2.station_id
			                left join (
			                    select
			                        company_id,
			                        sum(num_pump) as azs_num_pump
			                    from
			                        (select company_id,
			                                station_id,
			                                max(pump) as num_pump
			                        from oplati_analytic.bi_azs_petrol_sale
			                        group by company_id, station_id
			                    ) t
			                group by company_id
			                ) t3
			                on t1.company_id=t3.company_id
			                join
			                    (select distinct company_id,
			                        station_id,
			                        pump,
			                        ROW_NUMBER () over (order by company_id, station_id, pump) as pump_id
			                        from oplati_analytic.bi_azs_petrol_sale
			                        group by company_id, station_id, pump
			                        order by company_id, station_id, pump
			                    ) t4
			                on t1.company_id=t4.company_id and t1.station_id=t4.station_id and t1.pump=t4.pump
			                where status='OK'
			                ) AS virtual_table
			                JOIN
			                    (SELECT name AS name__,
			                        count(DISTINCT pump_id) AS mme_inner__
			                    FROM
			                        (select create_date,
			                            t1.company_id,
			                            t1.station_id,
			                            case
			                                when t1.company_id=1 then 'А-100 (колонки)'
			                                when t1.company_id=2 then 'Белоруснефть (колонки)'
			                                when t1.company_id=3 then 'United Company (колонки)'
			                            end as name,
			                            t1.pump,
			                            pump_id,
			                            num_pump,
			                            azs_num_pump
			                        from oplati_analytic.bi_azs_petrol_sale t1
			                    left join
			                        (select company_id,
			                            station_id,
			                            max(pump) as num_pump
			                        from oplati_analytic.bi_azs_petrol_sale
			                        group by company_id, station_id) t2 on t1.company_id=t2.company_id
			                        and t1.station_id=t2.station_id
			                        left join (
			                            select company_id,
			                                sum(num_pump) as azs_num_pump
			                            from
			                                (select company_id,
			                                    station_id,
			                                    max(pump) as num_pump
			                                from oplati_analytic.bi_azs_petrol_sale
			                                group by company_id, station_id
			                        ) t
			                    group by company_id) t3 on t1.company_id=t3.company_id
			                    join
			                        (select distinct company_id,
			                         station_id,
			                         pump,
			                         ROW_NUMBER () over (order by company_id, station_id, pump) as pump_id
			                        from oplati_analytic.bi_azs_petrol_sale
			                        group by company_id, station_id, pump
			                        order by company_id, station_id, pump
			                        ) t4
			                    on t1.company_id = t4.company_id and t1.station_id=t4.station_id and t1.pump=t4.pump
			                    where status='OK') AS virtual_table
			                WHERE create_date :: date = today() - 1
			                GROUP BY name
			                ORDER BY mme_inner__ DESC
			                LIMIT 100) AS anon_1 ON name = name__
			            WHERE create_date::date = today() - 1
			            GROUP BY name, DATE_TRUNC('day', create_date)
			
			            union all
			
			            SELECT 
			                create_date::date as \"date\",
			                case
			                	when company_id=1 then 'А-100 (заправки)'
			                    when company_id=2 then 'Белоруснефть (заправки)'
			                    when company_id=3 then 'United Company (заправки)'
			                end AS name,
			                (count(DISTINCT station_id)) :: Int64 AS amount_active,
			                ((case
				                when company_id =1 then
			                    	(select count(distinct station_id)
			                     	from oplati_analytic.spr_azs_station
			                     	where company_id =1
			                     	group by company_id)
				                when company_id =2 then
			                    	(select count(distinct station_id)
			                     	from oplati_analytic.spr_azs_station
			                     	where company_id =2
			                     	group by company_id)
				                when company_id =3 then
			                    	(select count(distinct station_id)
			                     	from oplati_analytic.spr_azs_station
			                     	where company_id =3
			                     	group by company_id)
			                    else 0
			                end) :: Int64) AS every,
			
			                1.0*COUNT (DISTINCT station_id)/(case
				                when company_id =1 then
			    	                (select count(distinct station_id)
			     	                from oplati_analytic.spr_azs_station
			     	                where company_id = 1
			     	                group by company_id)
				                when company_id = 2 then
			                    	(select count(distinct station_id)
			                     	from oplati_analytic.spr_azs_station
			                     	where company_id = 2
			                     	group by company_id)
				                when company_id = 3 then
			                    	(select count(distinct station_id)
			                     	from oplati_analytic.spr_azs_station
			                     	where company_id = 3
			                     	group by company_id)
			                end) AS amount_per
			
			                FROM oplati_analytic.bi_azs_petrol_sale
			                WHERE status = 'OK'
			                AND create_date::date = today() - 1
			                GROUP BY case
				                when company_id=1 then 'А-100 (заправки)'
			                    when company_id=2 then 'Белоруснефть (заправки)'
			                    when company_id=3 then 'United Company (заправки)'
			                end,
			                company_id,
			                create_date::date
			    
			                union all           
		            
                			SELECT date_trunc('day', date) AS date,
				                'Водоматы/вендинги'as name,
			                    (sum(active)) :: Int64 AS amount_active,
			                    every :: Int64,
			                    (SUM(active)) :: Int64 / (sum(every)) :: Int64 as amount_per
			       
                			FROM
			                    (SELECT DATE_TRUNC('day', created_date) AS date,
			                        count(DISTINCT poi) as active,
			                        amount as every
			                    from oplati_analytic.bi_pos_type
			                    left join (
				                    SELECT 
    				                    date_trunc('day', calendar_date) AS date,
				                        SUM(SUM(t.amount)) OVER (ORDER BY date_trunc('day', calendar_date)) AS amount
				                    FROM oplati_analytic.spr_calendar c
				                    LEFT JOIN (
				                        SELECT 
			        	                    date_trunc('day', open_date) AS date,
				                            COUNT(id) AS amount
    				                    FROM (
        				                    SELECT id + 1000000 AS id, cash_id
				                            FROM oplati_analytic.spr_wending_machine
				                            WHERE cash_id IS NOT NULL
				                            UNION ALL 
				                            SELECT id, cashbox_id
				                            FROM oplati_analytic.spr_water_machine
    				                    ) t
				                    LEFT JOIN oplati_analytic.spr_cashbox_area a 
				                    ON t.cash_id = a.cash_id
				                    GROUP BY date
				                ) t 
				                ON date_trunc('day', c.calendar_date) = t.date
				                GROUP BY date_trunc('day', calendar_date)
				                ORDER BY date DESC
			                    )t2
			                    on t2.date=date_trunc('day', created_date)
			                    where status = 1 and  device_id in (
			                         (select distinct cashbox_id from oplati_analytic.spr_water_machine where cashbox_id is not null)
			                       		union all
			                         (select distinct cash_id from oplati_analytic.spr_wending_machine where cash_id is not null))
			                    GROUP BY DATE_TRUNC('day', created_date), amount
			                    ) AS virtual_table
			                WHERE date:: date = today() - 1
                			GROUP BY date,every
			
			                union all
			
			                SELECT date_trunc('day', date) AS date,
				                'Аттракционы' as name,
			                    (sum(active)) :: Int64 AS amount_active,
			                    every :: Int64,
			                    (sum(active)) :: Int64 / (sum(every)) :: Int64 AS active_per
			       
			                FROM
			                    (SELECT date_trunc('day', buy_date) AS date,
			                            count(DISTINCT zone_id) as active,
			                            amount as every
			                    from oplati_analytic.bi_entertainment_ticket bi
			                    left join oplati_analytic.spr_entertainment_tarif spr on bi.tarif_id =spr.tarif_id
			                    left join (
			                        SELECT calendar_date AS date,
    		                			SUM(SUM(t.amount)) OVER (ORDER BY date_trunc('day', calendar_date)) AS amount
			                	    FROM oplati_analytic.spr_calendar
			                	    LEFT JOIN (
    				                    SELECT date_trunc('day', open_date) AS date,
        				                    COUNT(z.id) AS amount
    				                    FROM oplati_analytic.spr_entertainment_point p
    				                    LEFT JOIN oplati_analytic.spr_entertainment_zone z ON p.id = z.object_id
    				                    LEFT JOIN oplati_analytic.spr_cashbox_area a ON p.cash_id = a.cash_id
    				                    GROUP BY date
				                    ) t 
				                ON calendar_date = t.date
				                GROUP BY calendar_date
				                ORDER BY date DESC
			                )t2
			                on t2.date = date_trunc('day', buy_date)
			                where status='BUY'
			                GROUP BY date_trunc('day', buy_date), amount
			                ) AS virtual_table
			            
            			WHERE date:: date = today() - 1
            			GROUP BY date,every;"

  "tab_bi_activity_poi_monthly":
    overwrite_period: overwrite
    clickhouse_schema: oplati_views_report
    clickhouse_table: bi_activity_poi_monthly
    datetime_field: date
    recount_period: month
    remove_current: remove
    clickhouse_query: "insert into oplati_views_report.bi_activity_poi_monthly
                		SELECT 
				            DATE_TRUNC('month', date) AS date,
				            'Транспорт' as name,
			                sum(active) AS amount_active ,
			                every,
			                sum(active)/sum(every) AS active_per
                		FROM analytic_dimention_level.dim_activity_vehicle_monthly  
			            WHERE  DATE_TRUNC('month', date) = DATE_TRUNC('month', today())
			            GROUP BY date, every
			
                		union all
			
			            SELECT
			                DATE_TRUNC('month', create_date) AS date,
			                name AS name,
			                (count(DISTINCT pump_id)) :: Int64 AS amount_active,
			                (max(azs_num_pump)) :: Int64 as every,
			                (count(distinct pump_id)) :: Int64/(max(azs_num_pump)) :: Int64 AS active_per
			            FROM (
			                select
			                    create_date,
			                    t1.company_id,
			                    t1.station_id,
			                    case
			                        when t1.company_id=1 then 'А-100 (колонки)'
			                        when t1.company_id=2 then 'Белоруснефть (колонки)'
			                        when t1.company_id=3 then 'United Company (колонки)'
			                    end as name,
			                    t1.pump,
			                    pump_id,
			                    num_pump,
			                    azs_num_pump
			                from oplati_analytic.bi_azs_petrol_sale t1
			                left join (
			                    select
			                        company_id,
			                        station_id,
			                        max(pump) as num_pump
			                    from oplati_analytic.bi_azs_petrol_sale
			                    group by company_id, station_id
			                ) t2
			                on t1.company_id=t2.company_id and t1.station_id=t2.station_id
			                left join (
			                    select
			                        company_id,
			                        sum(num_pump) as azs_num_pump
			                    from (
			                        select
			                            company_id,
			                            station_id,
			                            max(pump) as num_pump
			                        from oplati_analytic.bi_azs_petrol_sale
			                        group by company_id, station_id
			                    ) t
			                    group by company_id
			                ) t3
			                on t1.company_id=t3.company_id
			                join (
			                    select
			                        distinct company_id,
			                        station_id,
			                        pump,
			                        ROW_NUMBER () over (order by company_id, station_id, pump) as pump_id
			                    from oplati_analytic.bi_azs_petrol_sale
			                    group by company_id, station_id, pump
			                    order by company_id, station_id, pump
			                ) t4
			                on t1.company_id=t4.company_id and t1.station_id=t4.station_id and t1.pump=t4.pump
			            where status='OK'
			            ) AS virtual_table
			            JOIN (
			                SELECT
			                    name AS name__,
			                    count(DISTINCT pump_id) AS mme_inner__
			                FROM (
			                    select
			                        create_date,
			                    t1.company_id,
			                    t1.station_id,
			                    case
			                        when t1.company_id=1 then 'А-100 (колонки)'
			                        when t1.company_id=2 then 'Белоруснефть (колонки)'
			                        when t1.company_id=3 then 'United Company (колонки)'
			                    end as name,
			                    t1.pump,
			                    pump_id,
			                    num_pump,
			                    azs_num_pump
			                    from oplati_analytic.bi_azs_petrol_sale t1
			                    left join (
			                        select
			                            company_id,
			                            station_id,
			                            max(pump) as num_pump
			                        from oplati_analytic.bi_azs_petrol_sale
			                        group by company_id, station_id
			                    ) t2
			                    on t1.company_id=t2.company_id and t1.station_id=t2.station_id
			                    left join (
			                        select
			                            company_id,
			                            sum(num_pump) as azs_num_pump
			                        from (
			                            select
			                                company_id,
			                                station_id,
			                                max(pump) as num_pump
			                            from oplati_analytic.bi_azs_petrol_sale
			                            group by company_id, station_id
			                        ) t
			                    group by company_id
			                    ) t3 on t1.company_id=t3.company_id
			                    join (
			                        select
			                            distinct company_id,
			                            station_id,
			                            pump,
			                            ROW_NUMBER () over (order by company_id, station_id, pump) as pump_id
			                        from oplati_analytic.bi_azs_petrol_sale
			                        group by company_id, station_id, pump
			                        order by company_id, station_id, pump
			                    ) t4
			                    on t1.company_id=t4.company_id and t1.station_id=t4.station_id and t1.pump=t4.pump
			                    where status='OK'
			                ) AS virtual_table
			                WHERE DATE_TRUNC('month', create_date) = DATE_TRUNC('month', today())
			                GROUP BY name
			                ORDER BY mme_inner__ DESC
			                LIMIT 100
			                ) AS anon_1 ON name = name__
			                WHERE  DATE_TRUNC('month', create_date) = DATE_TRUNC('month', today())
			                GROUP BY name, DATE_TRUNC('month', create_date)
			
                		union all
			
			            SELECT 
			            DATE_TRUNC('month', create_date) as date,
			            case
			            	when company_id=1 then 'А-100 (заправки)'
			                when company_id=2 then 'Белоруснефть (заправки)'
			                when company_id=3 then 'United Company (заправки)'
			            end AS name,
			            (count(DISTINCT station_id)) :: Int64 AS amount_active,
			            ((case
			            	when company_id =1 then
			                	(select count(distinct station_id)
			                 	from oplati_analytic.spr_azs_station
			                 	where company_id =1
			                 	group by company_id)
			            	when company_id =2 then
			                	(select count(distinct station_id)
			                 	from oplati_analytic.spr_azs_station
			                 	where company_id =2
			                 	group by company_id)
			            	when company_id =3 then
			                	(select count(distinct station_id)
			                 	from oplati_analytic.spr_azs_station
			                 	where company_id =3
			                 	group by company_id)
			                else 0
			            end) :: Int64) AS every,
			            
			            1.0*COUNT (DISTINCT station_id)/(case
			            	when company_id =1 then
			                	(select count(distinct station_id)
			                 	from oplati_analytic.spr_azs_station
			                 	where company_id = 1
			                 	group by company_id)
			            	when company_id = 2 then
			                	(select count(distinct station_id)
			                 	from oplati_analytic.spr_azs_station
			                 	where company_id = 2
			                 	group by company_id)
			            	when company_id = 3 then
			                	(select count(distinct station_id)
			                 	from oplati_analytic.spr_azs_station
			                 	where company_id = 3
			                 	group by company_id)
			            end) AS amount_per
			            
			            FROM oplati_analytic.bi_azs_petrol_sale
			            WHERE status = 'OK'
			            AND DATE_TRUNC('month', create_date) = DATE_TRUNC('month', today())
			            GROUP BY case
			                 		when company_id=1 then 'А-100 (заправки)'
			                        when company_id=2 then 'Белоруснефть (заправки)'
			                        when company_id=3 then 'United Company (заправки)'
			                     end,
			                     company_id,
			                     DATE_TRUNC('month', create_date)
			                
			                        
			            union all           
			            
			            SELECT
			                DATE_TRUNC('month', date) AS date,
				            'Водоматы/вендинги'as name,
			                (sum(active)) :: Int64 AS amount_active,
			                every :: Int64,
			                (SUM(active)) :: Int64 /(sum(every)) :: Int64 as amount_per   
			            FROM (
			                SELECT
			                    date_trunc('month', created_date) AS date,
			                    count(DISTINCT poi) as active,
			                    amount as every
			                from oplati_analytic.bi_pos_type
			                left join (
			                SELECT 
    				            date_trunc('month', calendar_date) AS date,
				                SUM(SUM(t.amount)) OVER (ORDER BY date_trunc('month', calendar_date)) AS amount
				            FROM oplati_analytic.spr_calendar c
				            LEFT JOIN (
				                SELECT 
			        	            date_trunc('day', open_date) AS date,
				                    COUNT(id) AS amount
    				            FROM (
        				            SELECT id + 1000000 AS id, cash_id
				                    FROM oplati_analytic.spr_wending_machine
				                    WHERE cash_id IS NOT NULL
				                    UNION ALL 
				                    SELECT id, cashbox_id
				                    FROM oplati_analytic.spr_water_machine
    				            ) t
				                LEFT JOIN oplati_analytic.spr_cashbox_area a 
				                ON t.cash_id = a.cash_id
				                GROUP BY date
				                ) t 
				                ON date_trunc('day', c.calendar_date) = t.date
				                GROUP BY date_trunc('month', calendar_date)
				                ORDER BY date DESC
				            )t2
				            on t2.date = date_trunc('month', created_date)
			                where status = 1
			                and device_id in (
			                     (select distinct cashbox_id
			                     from oplati_analytic.spr_water_machine
			                     where cashbox_id is not null)
			                        union all
			                     (select distinct cash_id
			                     from oplati_analytic.spr_wending_machine
			                     where cash_id is not null))
			                GROUP BY date_trunc('month', created_date), amount
			            ) AS virtual_table
			            WHERE date_trunc('month', date) = date_trunc('month', today()) 
			            GROUP BY date, every
			
                		union all
			
			            SELECT
			                DATE_TRUNC('month', date) AS date,
				            'Аттракционы' as name,
			                (sum(active)) :: Int64 AS amount_active,
			                every :: Int64,
			                (sum(active)) :: Int64 /(sum(every)) :: Int64 AS active_per
			            FROM (
			                SELECT
			                    DATE_TRUNC('month', buy_date) AS date,
			                    count(DISTINCT zone_id) as active,
			                    amount as every
			                from oplati_analytic.bi_entertainment_ticket bi
			                left join oplati_analytic.spr_entertainment_tarif spr on bi.tarif_id =spr.tarif_id
			                left join (
			                    select
			                        calendar_date AS date,
			                        SUM(SUM(t.amount)) over (order by date_trunc('month', calendar_date)) as amount
			                    from oplati_analytic.spr_calendar
			                    left join (
			                        select
			                            date_trunc('month', open_date) as date,
			                            count (z.id) as amount
			                        from oplati_analytic.spr_entertainment_point p
			                        left join oplati_analytic.spr_entertainment_zone z on p.id=z.object_id
			                        left join oplati_analytic.spr_cashbox_area a on p.cash_id =a.cash_id
			                        group by date
			                    ) t
			                    on calendar_date=t.date
			                    group by calendar_date
			                    order by date desc
			                ) t2
			                on t2.date=DATE_TRUNC('month', buy_date)
			                where status='BUY'
			                GROUP BY  date_trunc('month', buy_date), amount
			                ORDER BY date desc
			            ) AS virtual_table
			            
			            WHERE DATE_TRUNC('month', date) = DATE_TRUNC('month', today())
			            GROUP BY date,every;"

  "tab_bi_activity_poi_quarterly":
    overwrite_period: overwrite
    clickhouse_schema: oplati_views_report
    clickhouse_table: bi_activity_poi_quarterly
    datetime_field: date
    recount_period: quarter
    remove_current: remove
    clickhouse_query: "insert into oplati_views_report.bi_activity_poi_quarterly
                        SELECT 
	                        date_trunc('quarter', date) AS date,
	                        'Транспорт' as name,
	                        sum(active) AS amount_active,
	                        every,
	                        sum(active)/sum(every) AS active_per
                        FROM analytic_dimention_level.dim_activity_vehicle_quarterly  
                        WHERE date_trunc('quarter', date) = date_trunc('quarter', today())
                        GROUP BY date,every

                        union all
			
                        SELECT
	                        DATE_TRUNC('quarter', create_date) AS date,
	                        name AS name,
	                        (count(DISTINCT pump_id)) :: Int64 AS amount_active,
	                        (max(azs_num_pump)) :: Int64 as every,
	                        (count(distinct pump_id)) :: Int64/(max(azs_num_pump)) :: Int64 AS active_per
                        FROM (
	                        select
		                        create_date,
		                        t1.company_id,
		                        t1.station_id,
		                        case
		                        	when t1.company_id=1 then 'А-100 (колонки)'
		                        	when t1.company_id=2 then 'Белоруснефть (колонки)'
		                        	when t1.company_id=3 then 'United Company (колонки)'
		                        end as name,
		                        t1.pump,
		                        pump_id,
		                        num_pump,
		                        azs_num_pump
	                        from oplati_analytic.bi_azs_petrol_sale t1
	                        left join (
		                        select
			                        company_id,
			                        station_id,
			                        max(pump) as num_pump
		                        from oplati_analytic.bi_azs_petrol_sale
		                        group by company_id, station_id
	                        ) t2
	                        on t1.company_id=t2.company_id and t1.station_id=t2.station_id
	                        left join (
		                        select
			                        company_id,
			                        sum(num_pump) as azs_num_pump
		                        from (
			                        select
				                        company_id,
			                            station_id,
			                            max(pump) as num_pump
			                        from oplati_analytic.bi_azs_petrol_sale
			                        group by company_id, station_id
		                        ) t
	                            group by company_id
	                        ) t3
	                        on t1.company_id=t3.company_id
	                        join (
		                        select
			                        distinct company_id,
			                        station_id,
			                        pump,
			                        ROW_NUMBER () over (order by company_id, station_id, pump) as pump_id
		                        from oplati_analytic.bi_azs_petrol_sale
		                        group by company_id, station_id, pump
		                        order by company_id, station_id, pump
	                        ) t4
	                        on t1.company_id=t4.company_id and t1.station_id=t4.station_id and t1.pump=t4.pump
	                        where status='OK'
                        ) AS virtual_table
                        JOIN (
	                        SELECT
		                        name AS name__,
		                        count(DISTINCT pump_id) AS mme_inner__
	                        FROM (
		                        select
			                        create_date,
			                        t1.company_id,
			                        t1.station_id,
			                        case
			                        	when t1.company_id=1 then 'А-100 (колонки)'
			                            when t1.company_id=2 then 'Белоруснефть (колонки)'
			                            when t1.company_id=3 then 'United Company (колонки)'
			                        end as name,
			                        t1.pump,
			                        pump_id,
			                        num_pump,
			                        azs_num_pump
		                        from oplati_analytic.bi_azs_petrol_sale t1
		                        left join (
			                        select
				                        company_id,
			                            station_id,
			                            max(pump) as num_pump
			                        from oplati_analytic.bi_azs_petrol_sale
			                        group by company_id, station_id
		                        ) t2
		                        on t1.company_id=t2.company_id and t1.station_id=t2.station_id
		                        left join (
			                        select
				                        company_id,
			                            sum(num_pump) as azs_num_pump
			                        from (
				                        select
					                        company_id,
			                                station_id,
			                                max(pump) as num_pump
			                            from oplati_analytic.bi_azs_petrol_sale
			                            group by company_id, station_id
			                        ) t
			                        group by company_id
		                        )t3
		                        on t1.company_id=t3.company_id
		                        join (
			                        select
				                        distinct company_id,
			                            station_id,
			                            pump,
			                            ROW_NUMBER () over (order by company_id, station_id, pump) as pump_id
			                        from oplati_analytic.bi_azs_petrol_sale
			                        group by company_id, station_id, pump
			                        order by company_id, station_id, pump
		                        ) t4
		                        on t1.company_id=t4.company_id and t1.station_id=t4.station_id and t1.pump=t4.pump
		                        where status='OK'
	                        ) AS virtual_table
	                        WHERE DATE_TRUNC('quarter', create_date) = DATE_TRUNC('quarter', today())
	                        GROUP BY name
	                        ORDER BY mme_inner__ DESC
	                        LIMIT 100
	                    ) AS anon_1 ON name = name__
                        WHERE  DATE_TRUNC('quarter', create_date) = DATE_TRUNC('quarter', today())
                        GROUP BY name, DATE_TRUNC('quarter', create_date)
			
                        union all

		                SELECT 
			                DATE_TRUNC('quarter', create_date) as date,
			                case
			                	when company_id=1 then 'А-100 (заправки)'
			                    when company_id=2 then 'Белоруснефть (заправки)'
			                    when company_id=3 then 'United Company (заправки)'
			                end AS name,
			                (count(DISTINCT station_id)) :: Int64 AS amount_active,
			                ((case
			                	when company_id =1 then
			                    	(select count(distinct station_id)
			                     	from oplati_analytic.spr_azs_station
			                     	where company_id =1
			                     	group by company_id)
			                	when company_id =2 then
			                    	(select count(distinct station_id)
			                     	from oplati_analytic.spr_azs_station
			                     	where company_id =2
			                     	group by company_id)
			                	when company_id =3 then
			                    	(select count(distinct station_id)
			                     	from oplati_analytic.spr_azs_station
			                     	where company_id =3
			                     	group by company_id)
			                    else 0
			                end) :: Int64) AS every,
			
			                1.0*COUNT (DISTINCT station_id)/(case
			                	when company_id =1 then
			                    	(select count(distinct station_id)
			                     	from oplati_analytic.spr_azs_station
			                     	where company_id = 1
			                     	group by company_id)
			                	when company_id = 2 then
			                    	(select count(distinct station_id)
			                     	from oplati_analytic.spr_azs_station
			                     	where company_id = 2
			                     	group by company_id)
			                	when company_id = 3 then
			                    	(select count(distinct station_id)
			                     	from oplati_analytic.spr_azs_station
			                     	where company_id = 3
			                     	group by company_id)
			                end) AS amount_per
			
			            FROM oplati_analytic.bi_azs_petrol_sale
			            WHERE status = 'OK'
			            AND DATE_TRUNC('quarter', create_date) = DATE_TRUNC('quarter', today())
			            GROUP BY case
			     		    when company_id=1 then 'А-100 (заправки)'
			                when company_id=2 then 'Белоруснефть (заправки)'
			                when company_id=3 then 'United Company (заправки)'
			            end,
			            company_id,
			            DATE_TRUNC('quarter', create_date)

                        union all

			            SELECT
			                date_trunc('quarter', date) AS date,
				            'Водоматы/вендинги'as name,
			                (sum(active)) :: Int64 AS amount_active,
			                every :: Int64,
			                (SUM(active)) :: Int64 /(sum(every)) :: Int64 as amount_per
			            FROM (
			                SELECT
			                    date_trunc('quarter', created_date) AS date,
			                    count(DISTINCT poi) as active,
			                    amount as every
			                from oplati_analytic.bi_pos_type
			                left join (
			                    SELECT 
    				                date_trunc('quarter', calendar_date) AS date,
				                    SUM(SUM(t.amount)) OVER (ORDER BY date_trunc('quarter', calendar_date)) AS amount
				                FROM oplati_analytic.spr_calendar c
				                LEFT JOIN (
				                    SELECT 
			                        	date_trunc('day', open_date) AS date,
				                        COUNT(id) AS amount
    				                FROM (
        			                	SELECT id + 1000000 AS id, cash_id
				                        FROM oplati_analytic.spr_wending_machine
				                        WHERE cash_id IS NOT NULL
				                        UNION ALL 
				                        SELECT id, cashbox_id
				                        FROM oplati_analytic.spr_water_machine
    				            ) t
				                LEFT JOIN oplati_analytic.spr_cashbox_area a 
				                ON t.cash_id = a.cash_id
				                GROUP BY date
				            ) t 
				            ON date_trunc('day', c.calendar_date) = t.date
				            GROUP BY date_trunc('quarter', calendar_date)
				            ORDER BY date DESC
            			)t2 on t2.date = date_trunc('quarter', created_date)
			            where status = 1 and device_id in (
			                    (select distinct cashbox_id
			                    from oplati_analytic.spr_water_machine
			                    where cashbox_id is not null)
			                    union all
			                    (select distinct cash_id
			                    from oplati_analytic.spr_wending_machine
			                    where cash_id is not null))
			            GROUP BY date_trunc('quarter', created_date), amount) AS virtual_table
			            WHERE date_trunc('quarter', date) = date_trunc('quarter', today())
                		GROUP BY date, every
			
                		union all
			
			            SELECT
			                date_trunc('quarter', date) AS date,
				            'Аттракционы' as name,
			                (sum(active)) :: Int64 AS amount_active,
			                every :: Int64,
			                (sum(active)) :: Int64 /(sum(every)) :: Int64 AS active_per
			            FROM (
                    		SELECT
                    		    date_trunc('quarter', buy_date) AS date,
			                    count(DISTINCT zone_id) as active,
			                    amount as every
			                from oplati_analytic.bi_entertainment_ticket bi
			                left join oplati_analytic.spr_entertainment_tarif spr on bi.tarif_id =spr.tarif_id
			                left join (
			                    select
			                        calendar_date AS date,
			                        SUM(SUM(t.amount)) over (order by date_trunc('quarter', calendar_date)) as amount
			                    from oplati_analytic.spr_calendar
			                    left join (
			                        select
			                            date_trunc('quarter', open_date) as date,
			                            count (z.id) as amount
			                        from oplati_analytic.spr_entertainment_point p
			                        left join oplati_analytic.spr_entertainment_zone z on p.id=z.object_id
			                        left join oplati_analytic.spr_cashbox_area a on p.cash_id =a.cash_id
			                        group by date
			                    ) t on calendar_date=t.date
			                    group by calendar_date
			                    order by date desc
			                )t2
			                on t2.date=date_trunc('quarter', buy_date)
			                where status='BUY'
			                GROUP BY  date_trunc('quarter', buy_date), amount
			                ORDER BY date desc
			            ) AS virtual_table
			                
                		WHERE DATE_TRUNC('quarter', date) = DATE_TRUNC('quarter', today())
                		GROUP BY date,every;"

  "tab_bi_activity_person_daily":
    clickhouse_query: "insert into oplati_views_report.bi_activity_person_daily 
                        WITH active_table AS (
                            (SELECT  
                                DISTINCT date_trunc('day', trans_date) AS date,  
                                profile_id, 
                                'P2P' AS type 
                            FROM oplati_analytic.bi_transactions_p2p 
                            WHERE trans_date::date = today() - 1
                            GROUP BY date, profile_id)
                            
                            UNION ALL
                            
                            (SELECT  
                                DISTINCT date_trunc('day', trans_date) AS date, 
                                profile_id, 
                                'Пополнение' AS type                                  
                            FROM oplati_analytic.bi_transactions_in 
                            WHERE trans_date::date = today() - 1
                            GROUP BY date, profile_id)
	
                            UNION ALL	
                                			
	                        (select 
			                    distinct date_trunc('day', payment_date) as date, 
			                    profile_id,
			                    case
			                    	when (lowerUTF8(kontragent) ilike '%банк%' and lowerUTF8(kontragent) not ilike  '%небанк%')
			                    		or upperUTF8(purpose_pay) ilike upperUTF8('%A1 кошелек%')
			                    	then 'Вывод'
			                    	else 'ЕРИП' 
			                    end as type 
		                    from  oplati_analytic.bi_transactions_erip
		                    where status='COMPLETED' and payment_date :: date  = today() - 1
		                    group by date, profile_id, type)
	                            
	                        UNION ALL
	                        
	                        (select  
			                    distinct date_trunc('day', trans_date) as date, 
			                    profile_id, 
			                    case 
			                    	when type_name='Пассажирские перевозки' then 'POS (транспорт)'
			                    	when value_id = 1457 or value_id = 1648 or value_id = 1420 then 'POS (МТС,Life,Бетера)'
			                    	else 'POS (другие)' 
			                    end as type 
		                    from  oplati_analytic.bi_transactions_pos 
		                    where trans_date :: date  = today() - 1
		                    group by date, profile_id, type)
		                        					
	                        UNION ALL
                            	
                        	(select 
			                    distinct date_trunc('day', trans_date) as date,  
			                    profile_id, 
			                    'Вывод' as type 
		                    from  oplati_analytic.bi_transactions_out 
		                    where purpose_pay <>'Произвольные платежи' and trans_date :: date  = today() - 1
		                    group by date, profile_id)
                        
                        	UNION ALL
	                        
	                        (select 
			                    distinct date_trunc('day', trans_date) as date,  
			                    profile_id, 
			                    'Произвольные платежи' as type 
		                    from  oplati_analytic.bi_transactions_out 
		                    where purpose_pay ='Произвольные платежи' and trans_date :: date  = today() - 1
		                    group by date, profile_id)					
	
	                        UNION ALL
	                            
	                        (select  
			                    distinct date_trunc('day', trans_date) as date, 
			                    profile_id, 
			                    'Виртуальные карты' as type  
		                    from  oplati_analytic.bi_transactions_vcard_out 
		                    where trans_date :: date  = today() - 1
		                    group by date, profile_id) 
                        )

                        SELECT 
                            t1.date as date,
                            type, 
                            active :: Float64 AS active, 
                            every :: Float64 AS every, 
                            ev_act :: Float64 
                        FROM (
                            SELECT 
                                date,
                                type, 
                                COUNT(DISTINCT profile_id) AS active
                            FROM active_table
                            GROUP BY date, type
                        ) t1 
                        JOIN (
                            SELECT 
                                date, 
                                SUM(every) OVER (ORDER BY date) AS every 
                            FROM (
                                SELECT 
                                    date_trunc('day', open_date) AS date, 
                                    COUNT(profile_id) AS every 
                                FROM oplati_analytic.bi_customers
                                WHERE profile_id NOT IN (
                                    SELECT se.profile_id 
                                    FROM (
                                        SELECT
                                            profile_id,
                                            MAX(action_date) AS action_date  
                                        FROM oplati_analytic.bi_log_history 
                                        GROUP BY profile_id
                                    ) se
                                    JOIN oplati_analytic.bi_log_history slh
                                    ON se.profile_id = slh.profile_id AND se.action_date = slh.action_date 
                                    WHERE \"action\" = 'ADD' 
                                )
                                GROUP BY date_trunc('day', open_date)
                            ) t
                        ) t2
                        ON t1.date = t2.date
                        JOIN (
                            SELECT
                                date,
                                COUNT(DISTINCT profile_id) AS ev_act
                            FROM active_table 
                            GROUP BY date
                        ) t3
                        ON t1.date = t3.date;"

  "tab_bi_activity_person_monthly":
    overwrite_period: overwrite
    clickhouse_schema: oplati_views_report
    clickhouse_table: bi_activity_person_monthly
    datetime_field: date
    recount_period: month
    clickhouse_query: "insert into oplati_views_report.bi_activity_person_monthly 
                        WITH active_table AS (
	                        (select  
	                        	distinct date_trunc('month', trans_date) as date,  
	                        	profile_id, 
	                        	'P2P' as type  
	                        from  oplati_analytic.bi_transactions_p2p 
	                        where date_trunc('month', trans_date) = date_trunc('month', today() - 1)
	                        group by date, profile_id)
						
	                        union all
	
	                        (select  
		                        distinct date_trunc('month', trans_date) as date, 
		                        profile_id, 
		                        'Пополнение' as type 
	                        from  oplati_analytic.bi_transactions_in 
	                        where date_trunc('month', trans_date) = date_trunc('month', today() - 1)
	                        group by date, profile_id)
						
	                        union all
					
	                        (select 
	                        	distinct DATE_TRUNC('month', payment_date) as date, 
	                        	profile_id,
	                        	case
	                        		when (lowerUTF8(kontragent) ilike '%банк%' and lowerUTF8(kontragent) not ilike  '%небанк%')
	                        			or upperUTF8(purpose_pay) ilike upperUTF8('%A1 кошелек%') 
	                        		then 'Вывод'
	                        		else 'ЕРИП' 
	                        	end as type 
	                        from  oplati_analytic.bi_transactions_erip
	                        where status='COMPLETED' and  date_trunc('month', payment_date) = date_trunc('month', today() - 1)
	                        group by date, profile_id, type)
					     
	                        union all
					
	                        (select  
	                        	distinct date_trunc('month', trans_date) as date, 
	                        	profile_id, 
	                        	case 
	                        		when type_name='Пассажирские перевозки' then 'POS (транспорт)'
	                        		when value_id = 1457 or  value_id = 1648 or value_id = 1420 then 'POS (МТС,Life,Бетера)'
	                        		else 'POS (другие)' 
	                        	end as type 
	                        from  oplati_analytic.bi_transactions_pos 
	                        where date_trunc('month', trans_date) = date_trunc('month', today() - 1)
	                        group by date, profile_id, type)
						
	                        union all
					
	                        (select 
	                        	distinct date_trunc('month', trans_date) as date,  
	                        	profile_id, 
	                        	'Вывод' as type 
	                        from  oplati_analytic.bi_transactions_out 
	                        where purpose_pay <>'Произвольные платежи' and date_trunc('month', trans_date) = date_trunc('month', today() - 1)
	                        group by date, profile_id)
						
	                        union all
					
	                        (select 
	                        	distinct date_trunc('month', trans_date) as date,  
	                        	profile_id, 
	                        	'Произвольные платежи' as type 
	                        from  oplati_analytic.bi_transactions_out 
	                        where purpose_pay ='Произвольные платежи' and date_trunc('month', trans_date) = date_trunc('month', today() - 1)
	                        group by date, profile_id)
						
	                        union all
	
	                        (select  
	                        	distinct date_trunc('month', trans_date) as date, 
	                        	profile_id, 
	                        	'Виртуальные карты' as type  
	                        from  oplati_analytic.bi_transactions_vcard_out 
	                        where date_trunc('month', trans_date) = date_trunc('month', today() - 1)
	                        group by date, profile_id)
                        )
                        SELECT 
                            t1.date as date,
                            type, 
                            active::Float64 AS active, 
                            every::Float64 AS every, 
                            ev_act::Float64 
                        FROM (
                            SELECT 
                                date,
                                type, 
                                COUNT(DISTINCT profile_id) AS active
                            FROM active_table
                            GROUP BY date, type
                        ) t1 
                        JOIN (
                            SELECT 
                                date, 
                                SUM(every) OVER (ORDER BY date) AS every 
                            FROM (
                                SELECT 
                                    date_trunc('month', open_date) AS date, 
                                    COUNT(profile_id) AS every 
                                FROM oplati_analytic.bi_customers
                                WHERE profile_id NOT IN (
                                    SELECT se.profile_id 
                                    FROM 
                                    (
                                        SELECT profile_id, MAX(action_date) AS action_date  
                                        FROM oplati_analytic.bi_log_history 
                                        GROUP BY profile_id
                                    ) se
                                JOIN oplati_analytic.bi_log_history slh
                                ON se.profile_id = slh.profile_id  
                                AND se.action_date = slh.action_date 
                                WHERE \"action\" = 'ADD')
                                GROUP BY date_trunc('month', open_date)
                            ) t
                        ) t2
                        ON t1.date = t2.date
                        JOIN (
                            SELECT
                                date,
                                COUNT(DISTINCT profile_id) AS ev_act 
                            FROM active_table 
                            GROUP BY date
                        ) t3 ON t1.date = t3.date;"

  "tab_bi_activity_person_quarterly":
    overwrite_period: overwrite
    clickhouse_schema: oplati_views_report
    clickhouse_table: bi_activity_person_quarterly
    datetime_field: date
    recount_period: quarter
    clickhouse_query: "insert into oplati_views_report.bi_activity_person_quarterly
                        WITH active_table AS (
	                        (select  
	                        	distinct date_trunc('quarter', trans_date) as date,  
	                        	profile_id, 
	                        	'P2P' as type  
	                        from  oplati_analytic.bi_transactions_p2p 
	                        where date_trunc('quarter', trans_date) = date_trunc('quarter', today())
	                        group by date, profile_id)
						
                        	union all
	
	                        (select  
	                        	distinct date_trunc('quarter', trans_date) as date, 
	                        	profile_id, 
	                        	'Пополнение' as type 
	                        from  oplati_analytic.bi_transactions_in 
	                        where date_trunc('quarter', trans_date) = date_trunc('quarter', today())
	                        group by date, profile_id)
						
	                        union all
					
	                        (select 
	                        	distinct DATE_TRUNC('quarter', payment_date) as date, 
	                        	profile_id,
	                        	case
	                        		when (lowerUTF8(kontragent) ilike '%банк%' and lowerUTF8(kontragent) not ilike  '%небанк%')
	                        			or upperUTF8(purpose_pay) ilike upperUTF8('%A1 кошелек%') 
	                        		then 'Вывод'
	                        		else 'ЕРИП' 
	                        	end as type 
	                        from  oplati_analytic.bi_transactions_erip
	                        where status='COMPLETED' and  date_trunc('quarter', payment_date) = date_trunc('quarter', today())
	                        group by date, profile_id, type)
					     
	                        union all
					
	                        (select  
	                        	distinct date_trunc('quarter', trans_date) as date, 
	                        	profile_id, 
	                        	case 
	                        		when type_name='Пассажирские перевозки' then 'POS (транспорт)'
	                        		when value_id = 1457 or  value_id = 1648 or value_id = 1420 then 'POS (МТС,Life,Бетера)'
	                        		else 'POS (другие)' 
	                        	end as type 
	                        from  oplati_analytic.bi_transactions_pos 
	                        where date_trunc('quarter', trans_date) = date_trunc('quarter', today())
	                        group by date, profile_id, type)
						
	                        union all
					
	                        (select 
	                        	distinct date_trunc('quarter', trans_date) as date,  
	                        	profile_id, 
	                        	'Вывод' as type 
	                        from  oplati_analytic.bi_transactions_out 
	                        where purpose_pay <>'Произвольные платежи' and date_trunc('quarter', trans_date) = date_trunc('quarter', today())
	                        group by date, profile_id)
						
	                        union all
					
	                        (select 
	                        	distinct date_trunc('quarter', trans_date) as date,  
	                        	profile_id, 
	                        	'Произвольные платежи' as type 
	                        from  oplati_analytic.bi_transactions_out 
	                        where purpose_pay ='Произвольные платежи' and date_trunc('quarter', trans_date) = date_trunc('quarter', today())
	                        group by date, profile_id)
						
	                        union all
	
	                        (select  
	                        	distinct date_trunc('quarter', trans_date) as date, 
	                        	profile_id, 
	                        	'Виртуальные карты' as type  
	                        from  oplati_analytic.bi_transactions_vcard_out 
	                        where date_trunc('quarter', trans_date) = date_trunc('quarter', today())
	                        group by date, profile_id)
                        )
                        SELECT 
                            t1.date as date,
                            type, 
                            active :: Float64 AS active, 
                            every :: Float64 AS every, 
                            ev_act :: Float64 as ev_act
                        FROM (
                            SELECT 
                                date,
                                type, 
                                COUNT(DISTINCT profile_id) AS active
                            FROM active_table
                            GROUP BY date, type
                        ) t1 
                        JOIN (
                            SELECT 
                                date, 
                                SUM(every) OVER (ORDER BY date) AS every 
                            FROM (
                                SELECT 
                                    date_trunc('quarter', open_date) AS date, 
                                    COUNT(profile_id) AS every 
                                FROM oplati_analytic.bi_customers
                                WHERE profile_id NOT IN (
                                    SELECT se.profile_id 
                                    FROM (
                                        SELECT profile_id, MAX(action_date) AS action_date  
                                        FROM oplati_analytic.bi_log_history 
                                        GROUP BY profile_id
                                    ) se
                                    JOIN oplati_analytic.bi_log_history slh
                                    ON se.profile_id = slh.profile_id AND se.action_date = slh.action_date 
                                    WHERE \"action\" = 'ADD' 
                                )
                                GROUP BY date_trunc('quarter', open_date)
                            ) t
                        ) t2 ON t1.date = t2.date
                        JOIN (
                            SELECT
                                date,
                                COUNT(DISTINCT profile_id) AS ev_act 
                            FROM active_table 
                            GROUP BY date
                        ) t3 ON t1.date = t3.date;"

  "tab_bi_activity_org_daily":
    clickhouse_query: "insert into oplati_views_report.bi_activity_org_daily
                        select
                            org_act.\"date\" as date,
                            \"name\",
                            amount,
                            active_per,
                            amount_t as total_unit
                        from (
			                SELECT
			                    date_trunc('day', trans_date) AS date,
				                'Юрлица' as name,
			                     count(DISTINCT itn) AS amount
			                FROM oplati_analytic.bi_transactions_org_out
			                WHERE trans_date::date = today() - 1
			                GROUP BY date_trunc('day', trans_date)
			                ORDER BY amount desc
                        ) org_act
			
			            join (
                			SELECT
                			    date_trunc('day', date) AS __timestamp,
			                    sum(active)/sum(cum_sum) AS active_per
			                FROM (
			                    SELECT
			                        date_trunc('day', trans_date) AS date,
			                        count(DISTINCT itn) as active,
			                        amount :: Int64 as cum_sum
			                    FROM oplati_analytic.bi_transactions_org_out
			                    left join (
			   	                    SELECT
    				                    calendar_date AS date,
    				                    SUM(SUM(t.amount)) OVER (ORDER BY calendar_date) AS amount
				                    FROM oplati_analytic.spr_calendar
				                    LEFT JOIN (
    				                    SELECT
        				                    date_trunc('day', date_create) AS date,
        				                    COUNT(DISTINCT profile_id) AS amount
    				                    FROM oplati_analytic.bi_organisation
    				                    GROUP BY date
				                    ) t
				                    ON calendar_date = t.date
				                    GROUP BY calendar_date
				                    ORDER BY date DESC  
			                    )t2
			                    on t2.date = date_trunc('day', trans_date)
			                    GROUP BY date_trunc('day', trans_date), amount
			                    ORDER BY date desc
			                ) AS virtual_table
			                WHERE date :: date = today() - 1
			                GROUP BY date_trunc('day', date)
			                ORDER BY active_per DESC
            			) as org_per
			            on org_act.date = org_per.\"__timestamp\"
			
			            join (
			                SELECT
			                    date_trunc('day', date) AS date,
			                    max(cum_sum) AS amount_t
			                FROM (
			                    SELECT
			                        date_trunc('day', trans_date) AS date,
			                        count(DISTINCT itn) as active,
			                        amount::int as cum_sum
			                    FROM oplati_analytic.bi_transactions_org_out
	    		                left join (
			   	                    select
			   		                    calendar_date AS date,
			                            SUM(SUM(t.amount)) over (order by calendar_date) as amount
			                        from oplati_analytic.spr_calendar
			                        left join (
			        	                SELECT 
			        		                date_trunc('day', date_create) AS date,
			                                count(distinct bw.profile_id) as amount
			         	                FROM oplati_analytic.bi_organisation bo
			         	                left join oplati_analytic.bi_wallet bw 
			         	                on bo.profile_id = bw.profile_id 
			         	                where bw.closed_on is null
			         	                group by date
			                        ) t
			                        on calendar_date=t.date
			                        group by calendar_date
			                        order by date desc
			                    )t2
			                    on t2.date=date_trunc('day', trans_date)
			                    where trans_date :: date = today() - 1
			                    GROUP BY date_trunc('day', trans_date), amount
			                ) AS virtual_table
			                GROUP BY date
            			) as c_sum
			            on org_act.date = c_sum.date
			
            			union all
			
			            select
			                \"date\",
                            \"name\",
                            amount,
                            active_per,
                            amount_t as total_unit
                        from (
			                SELECT
			                    date_trunc('day', created_date) AS date,
				                'Точки продаж' as name	,
			                    count(DISTINCT pos_id) AS amount
			                FROM oplati_analytic.bi_pos_type_2023
			                WHERE status = 1 and created_date:: date = today() - 1
			                GROUP BY date_trunc('day', created_date)
			                ORDER BY amount DESC
			            ) pos_act
			
			            join(
			                SELECT
			                    date_trunc('day', date) AS date_t,
			                    sum(active)/sum(cum_sum) AS active_per
			                FROM (
			                    SELECT
			                        date_trunc('day', created_date) AS date,
			                        count(DISTINCT pos_id) as active,
			                        amount::int as cum_sum
			                    FROM oplati_analytic.bi_pos_type
			                    left join (
			                        select
			     	                    calendar_date AS date,
			                            SUM(SUM(t.amount)) over (order by calendar_date) as amount
			                        from oplati_analytic.spr_calendar
			                        left join (
			                            SELECT
			                                date_trunc('day', open_date) AS date,
			                                count(distinct pos_id) as amount
			                            FROM oplati_analytic.spr_pos_area
			                            group by date
			                        ) t
			                        on calendar_date=t.date 
			                        group by date
			                        order by date desc
			                    )t2
			                    on t2.date = date_trunc('day', created_date)
			                    where status = 1
			                    GROUP BY date_trunc('day', created_date), amount
			                ) AS virtual_table
			                WHERE date:: date = today() - 1
			                GROUP BY date_trunc('day', date)
			                ORDER BY active_per DESC
			            ) as pos_per
			            on pos_act.date = pos_per.date_t
			            
			            join (
			                SELECT
			                    date_trunc('day', date) AS __timestamp,
			                    max(cum_sum) AS amount_t
			                FROM (
			                    SELECT
			                        date_trunc('day', created_date) AS date,
			                        count(DISTINCT pos_id) as active,
			                        amount :: Int64 as cum_sum
			                    FROM oplati_analytic.bi_pos_type
			                    left join (
			                        select
			     	                    calendar_date AS date,
			                            SUM(SUM(t.amount)) over (order by calendar_date) as amount
			                        from oplati_analytic.spr_calendar
			                        left join (
			                            SELECT
			                                date_trunc('day', open_date) AS date,
			                                count(distinct pos_id) as amount
			                            FROM oplati_analytic.spr_pos_area
			                            where close_date is null
			                            group by date
			       	                ) t
			       	                on calendar_date=t.date
			                        group by date
			                        order by date desc
			                    )t2
			                    on t2.date = date_trunc('day', created_date)  
			                    where status = 1 and created_date :: date = today() - 1
			                    GROUP BY date_trunc('day', created_date), amount
			                ) AS virtual_table
			                GROUP BY date_trunc('day', date)
			            ) as ddd
			            on pos_act.date = ddd.__timestamp
			
			            union all
			
			            select
			                cash_act.\"date\",
			                \"name\",
			                amount,
			                active_per,
			                amount_t as total_unit
			            from (
			                SELECT
			                    date_trunc('day', created_date) AS date,
					            'Кассы' as name,
			                    count(DISTINCT device_id) AS amount
			                FROM oplati_analytic.bi_pos_type_2023
			                where status = 1 and created_date:: date = today() - 1
			                GROUP BY date_trunc('day', created_date)
			                ORDER BY amount DESC
			            ) cash_act			
			
			            join(
			                SELECT
			                    date_trunc('day', date) AS date_t,
			                    sum(active)/sum(cum_sum) AS active_per
			                FROM (
			                    SELECT
			                        date_trunc('day', created_date) AS date,
			                        count(DISTINCT device_id) as active,
			                        amount :: Int64 as cum_sum
			                    FROM oplati_analytic.bi_pos_type
			                    left join (
			   	                    select
			   		                    calendar_date AS date,
			                            SUM(SUM(t.amount)) over (order by calendar_date) as amount
			                        from oplati_analytic.spr_calendar
			                        left join (
			                            SELECT
			                                date_trunc('day', open_date) AS date,
			                                count(distinct cash_id) as amount
			                            FROM oplati_analytic.spr_cashbox_area
			                            where close_date is NULL
			                            group by date
			                        ) t
			                        on calendar_date=t.date
			                        group by date
			                        order by date desc
			                    )t2
			                    on t2.date=date_trunc('day', created_date)
			                    where status = 1
			                    GROUP BY date_trunc('day', created_date), amount
			                ) AS virtual_table
			                WHERE date:: date = today() - 1
			                GROUP BY date_trunc('day', date)
			                ORDER BY active_per DESC
			            ) as cash_per
			            on cash_act.date=cash_per.date_t
			
			            join (
			                SELECT
			                    date_trunc('day', date) AS __timestamp,
			                    max(cum_sum) AS amount_t
			                FROM (
			                    SELECT
			                        date_trunc('day', created_date) AS date,
			                        count(DISTINCT pos_id) as active,
			                        amount :: Int64 as cum_sum
			                    FROM oplati_analytic.bi_pos_type
			                    left join (
			                        select
			                            calendar_date AS date,
			                            SUM(SUM(t.amount)) over (order by calendar_date) as amount
			                        from oplati_analytic.spr_calendar
			                        left join (
			                            SELECT
			                                date_trunc('day', open_date) AS date,
			                                count(distinct cash_id) as amount
			                            FROM oplati_analytic.spr_cashbox_area sca 
			                            where close_date is null
			                            group by date
			                        ) t
			                        on calendar_date=t.date
			                        group by date
			                        order by date desc
			                    )t2
			                    on t2.date=date_trunc('day', created_date)
			                    where status = 1 and created_date :: date = today() - 1
			                    GROUP BY date_trunc('day', created_date), amount
			                ) AS virtual_table
			            GROUP BY date_trunc('day', date)
			            ) as am_cash
			            on cash_act.date = am_cash.__timestamp;"

  "tab_bi_activity_org_monthly":
    overwrite_period: overwrite
    clickhouse_schema: oplati_views_report
    clickhouse_table: bi_activity_org_monthly
    datetime_field: date
    recount_period: month
    remove_current: remove
    clickhouse_query: "insert into oplati_views_report.bi_activity_org_monthly
                        select
                            date,
                            name,
                            amount,
                            active_per
                        from (
			                SELECT
			                    date_trunc('month', trans_date) AS date,
				                'Юрлица' as name,
			                    count(DISTINCT itn) AS amount
			                FROM oplati_analytic.bi_transactions_org_out
			                WHERE date_trunc('month', trans_date) = date_trunc('month', today())
			                GROUP BY date_trunc('month', trans_date)
			                ORDER BY amount desc
			            ) org_act

            			join(
			                SELECT
			                    date_trunc('month', date) AS __timestamp,
			                    sum(active)/sum(cum_sum) AS active_per
			                FROM (
			                    SELECT
			                        date_trunc('month', trans_date) AS date,
			                        count(DISTINCT itn) as active,
			                        amount :: Int64 as cum_sum
			                    FROM oplati_analytic.bi_transactions_org_out
			                    left join (
			                        select
			                            calendar_date AS date,
			                            SUM(SUM(t.amount)) over (order by calendar_date) as amount
			                        from oplati_analytic.spr_calendar
			                        left join (
			                            SELECT
			                                date_trunc('month', date_create) AS date,
			                                count(distinct profile_id) as amount
			                            FROM oplati_analytic.bi_organisation
			                            group by date
			                        ) t
			                        on calendar_date=t.date
			                        group by date
			                        order by date desc
			                    )t2
			                    on t2.date=date_trunc('month', trans_date)
			                    GROUP BY date_trunc('month', trans_date), amount
			                ) AS virtual_table
			                WHERE date_trunc('month', date) = date_trunc('month', today())
			                GROUP BY date_trunc('month', date)
			                ORDER BY active_per DESC
			            ) as org_per
			            on org_act.date = org_per.\"__timestamp\"

			            union all

			            select
			                date,
			                name,
			                amount,
			                active_per
			            from (
			                SELECT
			                    date_trunc('month', created_date) AS date,
			            	    'Точки продаж' as name	,
			                    count(DISTINCT pos_id) AS amount
			                FROM oplati_analytic.bi_pos_type_2023
			                WHERE date_trunc('month', created_date) = date_trunc('month', today()) and status  = 1
			                GROUP BY date_trunc('month', created_date)
			                ORDER BY amount DESC
			            ) pos_act

			            join(
			                SELECT
			                    date_trunc('month', date) AS date_t,
			                    sum(active)/sum(cum_sum) AS active_per
			                FROM (
			                    SELECT
			                        date_trunc('month', created_date) AS date,
			                        count(DISTINCT pos_id) as active,
			                        amount :: Int64 as cum_sum
			                    FROM oplati_analytic.bi_pos_type
			                    left join (
			   	                    select
			   	                        calendar_date AS date,
			                            SUM(SUM(t.amount)) over (order by calendar_date) as amount
			                        from oplati_analytic.spr_calendar
			                        left join (
			      	                    SELECT
			      	                        date_trunc('month', open_date) AS date,
			                                count(distinct pos_id) as amount
			                            FROM oplati_analytic.spr_pos_area
			                            group by date
			                        ) t
			                        on calendar_date=t.date
			                        group by date
			                        order by date desc
			                    )t2
			                    on t2.date = date_trunc('month', created_date)
			                    where status = 1
			                    GROUP BY date_trunc('month', created_date), amount
			                ) AS virtual_table
			                WHERE date_trunc('month', date) = date_trunc('month', today())
			                GROUP BY date_trunc('month', date)
			                ORDER BY active_per DESC
            			) as pos_per
			            on pos_act.date = pos_per.date_t

			            union all

			            select
			                date,
			                name,
			                amount,
			                active_per
			            from (
			                SELECT
			                    date_trunc('month', created_date) AS date,
					            'Кассы' as name,
			                    count(DISTINCT device_id) AS amount
			                    FROM oplati_analytic.bi_pos_type_2023
			                    WHERE date_trunc('month', created_date) = date_trunc('month', today()) and status = 1
			                GROUP BY date_trunc('month', created_date)
			                ORDER BY amount DESC
			            ) cash_act

			            join(
			                SELECT
			                    date_trunc('month', date) AS date_t,
			                    sum(active)/sum(cum_sum) AS active_per
			                FROM (
			                    SELECT
			                        date_trunc('month', created_date) AS date,
			                        count(DISTINCT device_id) as active,
			                        amount :: Int64 as cum_sum
			                    FROM oplati_analytic.bi_pos_type
			                    left join (
			   	                    select
			   	                        calendar_date AS date,
			                            SUM(SUM(t.amount)) over (order by calendar_date) as amount
			                        from oplati_analytic.spr_calendar
			                        left join (
			                            SELECT
			                                date_trunc('month', open_date) AS date,
			                                count(distinct cash_id) as amount
			                            FROM oplati_analytic.spr_cashbox_area
			                            where close_date is NULL
			                            group by date
			                        ) t
			                        on calendar_date=t.date
			                        group by date
			                        order by date desc
			                    )t2 on t2.date=date_trunc('month', created_date)
			                    where status = 1
			                    GROUP BY DATE_TRUNC('month', created_date), amount
			                ) AS virtual_table
			                WHERE date_trunc('month', date) = date_trunc('month', today())
			                GROUP BY DATE_TRUNC('month', date)
			                ORDER BY active_per DESC
			            ) as cash_per
			            on cash_act.date=cash_per.date_t;"

  "tab_bi_activity_org_quarterly":
    overwrite_period: overwrite
    clickhouse_schema: oplati_views_report
    clickhouse_table: bi_activity_org_quarterly
    datetime_field: date
    recount_period: quarter
    remove_current: remove
    clickhouse_query: "insert into oplati_views_report.bi_activity_org_quarterly
                        select
                            date,
                            name,
                            amount,
                            active_per
                        from (
			                SELECT
			                    date_trunc('quarter', trans_date) AS date,
				                'Юрлица' as name,
			                    count(DISTINCT itn) AS amount
			                FROM oplati_analytic.bi_transactions_org_out
			                WHERE date_trunc('quarter', trans_date) = date_trunc('quarter', today())
			                GROUP BY date_trunc('quarter', trans_date)
			                ORDER BY amount desc
			            ) org_act
			
			            join(
			                SELECT
			                    date_trunc('quarter', date) AS __timestamp,
			                    sum(active)/sum(cum_sum) AS active_per
			                FROM (
			                    SELECT
			                        date_trunc('quarter', trans_date) AS date,
			                        count(DISTINCT itn) as active,
			                        amount :: Int64 as cum_sum
			                    FROM oplati_analytic.bi_transactions_org_out
			                    left join (
			                        select
			                            calendar_date AS date,
			                            SUM(SUM(t.amount)) over (order by calendar_date) as amount
			                        from oplati_analytic.spr_calendar
			                        left join (
			                            SELECT
			                                date_trunc('quarter', date_create) AS date,
			                                count(distinct profile_id) as amount
			                            FROM oplati_analytic.bi_organisation
			                            group by date
			                        ) t
			                        on calendar_date=t.date
			                        group by date
			                        order by date desc
			                    )t2
			                    on t2.date=date_trunc('quarter', trans_date)
			                    GROUP BY date_trunc('quarter', trans_date), amount
			                ) AS virtual_table
			                WHERE date_trunc('quarter', date) = date_trunc('quarter', today())
			                GROUP BY date_trunc('quarter', date)
			                ORDER BY active_per DESC
			            ) as org_per
			            on org_act.date = org_per.\"__timestamp\"

            			union all
			
			            select
			                date,
			                name,
			                amount,
			                active_per
			            from (
			                SELECT
			                    date_trunc('quarter', created_date) AS date,
				                'Точки продаж' as name	,
			                    count(DISTINCT pos_id) AS amount
			                FROM oplati_analytic.bi_pos_type_2023
			                WHERE date_trunc('quarter', created_date) = date_trunc('quarter', today()) and status  = 1
			                GROUP BY date_trunc('quarter', created_date)
			                ORDER BY amount DESC
			            ) pos_act
			
			            join(
			                SELECT
			                    date_trunc('quarter', date) AS date_t,
			                    sum(active)/sum(cum_sum) AS active_per
			                FROM (
			                    SELECT
			                        date_trunc('quarter', created_date) AS date,
			                        count(DISTINCT pos_id) as active,
			                        amount :: Int64 as cum_sum
			                    FROM oplati_analytic.bi_pos_type
			                    left join (
			                        select
			                            calendar_date AS date,
			                            SUM(SUM(t.amount)) over (order by calendar_date) as amount
			                        from oplati_analytic.spr_calendar
			                        left join (
			                            SELECT
			                                date_trunc('quarter', open_date) AS date,
			                                count(distinct pos_id) as amount
			                            FROM oplati_analytic.spr_pos_area
			                            group by date
			                        ) t
			                        on calendar_date=t.date
			                        group by date
				                    order by date desc
			                    )t2
			                    on t2.date = date_trunc('quarter', created_date)
			                    where status = 1
			                    GROUP BY date_trunc('quarter', created_date), amount
			                ) AS virtual_table
			                WHERE date_trunc('quarter', date) = date_trunc('quarter', today())
			                GROUP BY date_trunc('quarter', date)
			                ORDER BY active_per DESC
			            ) as pos_per
			            on pos_act.date = pos_per.date_t
			
			            union all
			
			            select
			                \"date\",
                            \"name\",
                            amount,
                            active_per
                        from (
			                SELECT
			                    date_trunc('quarter', created_date) AS date,
					            'Кассы' as name,
			                    count(DISTINCT device_id) AS amount
			                FROM oplati_analytic.bi_pos_type_2023
			                WHERE date_trunc('quarter', created_date) = date_trunc('quarter', today()) and status = 1
			                GROUP BY date_trunc('quarter', created_date)
			                ORDER BY amount DESC
			            ) cash_act
			
			            join(
			                SELECT
			                    date_trunc('quarter', date) AS date_t,
			                    sum(active)/sum(cum_sum) AS active_per
			                FROM (
			                    SELECT
			                        date_trunc('quarter', created_date) AS date,
			                        count(DISTINCT device_id) as active,
			                        amount :: Int64 as cum_sum
			                    FROM oplati_analytic.bi_pos_type
			                    left join (
			                        select
			                            calendar_date AS date,
			                            SUM(SUM(t.amount)) over (order by calendar_date) as amount
			                        from oplati_analytic.spr_calendar
			                        left join (
			                            SELECT
			                                date_trunc('quarter', open_date) AS date,
			                                count(distinct cash_id) as amount
			                            FROM oplati_analytic.spr_cashbox_area
			                            where close_date is NULL
			                            group by date
			                        ) t
			                        on calendar_date=t.date
			                        group by date
			                        order by date desc
			                    )t2
			                    on t2.date=DATE_TRUNC('quarter', created_date)
			                    where status=1
			                    GROUP BY DATE_TRUNC('quarter', created_date), amount
			                ) AS virtual_table
			                WHERE DATE_TRUNC('quarter', date) = DATE_TRUNC('quarter', today())
			                GROUP BY DATE_TRUNC('quarter', date)
			                ORDER BY active_per DESC
			            ) as cash_per
			            on cash_act.date=cash_per.date_t;"

######################################## spr_cashbox_area_detailed + bi_pos_type_datails ##############################


  "tab_spr_cashbox_area_detailed":
    overwrite_period: overwrite
    clickhouse_schema: oplati_analytic
    clickhouse_table: spr_cashbox_area_detailed
    datetime_field:
    recount_period: day
    clickhouse_query: "INSERT INTO oplati_analytic.spr_cashbox_area_detailed
                        SELECT
	                        cash_id,
	                        reg_num,
	                        org_id,
	                        smc.code as code,
	                        parent_name,
	                        parent_id,
	                        first_child_name,
	                        first_child_id,
	                        second_child_name,
	                        second_child_id,
	                        third_child_name,
	                        third_child_id,
	                        profile_id,
	                        new_title,
	                        ownership,
	                        case
    					when smc.code = '' and smc.second_child_name = '' and smc.first_child_name = '' then ''
    					when smc.code = '' and smc.second_child_name = '' then concat(smc.code, ' - ', smc.first_child_name)
    					else concat(smc.code, ' - ', smc.second_child_name)
	                        end as mcc_code_name_combo
                        FROM oplati_analytic.spr_cashbox_area sca

                        left join (
	                        select
 		                        ccc.code as code,
		                        csd.name as parent_name,
		                        csd.id as parent_id,
		                        ddd.name as first_child_name,
		                        ddd.ch_id as first_child_id,
		                        ccc.name as second_child_name,
		                        ccc.dim_id  as second_child_id,
		                        uuu.name as third_child_name,
		                        uuu.dim_id as third_child_id
	                        from (
		                        select name, dim_id as id
		                        FROM oplati_analytic.spr_mcc_code
		                        where parent_id is null
		                        GROUP BY name,dim_id
		                        ORDER BY name) csd

                        	left join (
                        		select name, dim_id as ch_id, parent_id as pr
                        		FROM oplati_analytic.spr_mcc_code
                        		where parent_id is not null
                        		GROUP BY name,dim_id,parent_id
                        		ORDER BY name)ddd
                        	on csd.id = ddd.pr

                        	left join (
                        		select code, name, dim_id, parent_id as pr_2
                        		FROM oplati_analytic.spr_mcc_code
                        		where parent_id is not null
                        		GROUP BY name,dim_id,parent_id,code
                        		ORDER BY name)ccc
                        	on ddd.ch_id = ccc.pr_2

                        	left join (
                        		select name, dim_id, parent_id as pr_3
                        		FROM oplati_analytic.spr_mcc_code
                        		where parent_id is not null
                        		GROUP BY name,dim_id,parent_id
                        		ORDER BY name
                        	)uuu
                        	on ccc.dim_id = uuu.pr_3
                        )smc
                        on sca.mcc_code = smc.code

                        left join (
                        select
                            profile_id,
	                        case
		                        when upper(title) LIKE upper('Частное торгово-производственное унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Частное торгово-производственное унитарное предприятие ', 'ЧТПУП ')
		                        when upper(title) LIKE upper('Частное производственно-торговое унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Частное производственно-торговое унитарное предприятие ', 'ЧПТУП ')
		                        when upper(title) LIKE upper('Частное туристское унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Частное туристское унитарное предприятие ', 'ЧТурУП ')
		                        when upper(title) LIKE upper('Частное транспортное унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Частное транспортное унитарное предприятие ', 'ЧТрансУП ')
		                        when upper(title) LIKE upper('Общество с ограниченной ответственностью \"%\"')
		                            then REPLACE(title, 'Общество с ограниченной ответственностью ', 'ООО ')
		                        when upper(title) LIKE upper('Общество с дополнительной ответственностью \"%\"')
		                            then REPLACE(title, 'Общество с дополнительной ответственностью ', 'ОДО ')
		                        when upper(title) LIKE upper('Частное торговое унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Частное торговое унитарное предприятие ', 'ОДО ')
		                        when upper(title) LIKE upper('Совместное общество с ограниченной ответственностью \"%\"')
		                            then REPLACE(title, 'Совместное общество с ограниченной ответственностью ', 'СООО ')
		                        when upper(title) LIKE upper('Закрытое акционерное общество \"%\"')
		                            then REPLACE(title, 'Закрытое акционерное общество ', 'ЗАО ')
		                        when upper(title) LIKE upper('Открытое акционерное общество \"%\"')
		                            then REPLACE(title, 'Открытое акционерное общество ', 'ОАО ')
		                        when upper(title) LIKE upper('Индивидуальный предприниматель %')
		                            then REPLACE(title, 'Индивидуальный предприниматель ', 'ИП ')
		                        when upper(title) LIKE upper('Государственное учреждение \"%\"')
		                            then REPLACE(title, 'Государственное учреждение ', 'ГУ ')
		                        when upper(title) LIKE upper('Иностранное общество с ограниченной ответственностью \"%\"')
		                            then REPLACE(title, 'Иностранное общество с ограниченной ответственностью ', 'ИООО ')
		                        when upper(title) LIKE upper('Частное унитарное предприятие по оказанию услуг \"%\"')
		                            then REPLACE(title, 'Частное унитарное предприятие по оказанию услуг ', 'ЧУПОУ ')
		                        when upper(title) LIKE upper('Частное унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Частное унитарное предприятие ', 'ЧУП ')
		                        when upper(title) LIKE upper('Частное предприятие \"%\"')
		                            then REPLACE(title, 'Частное предприятие ', 'ЧП ')
		                        when upper(title) LIKE upper('Частное  унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Частное  унитарное предприятие ', 'ЧУП ')
		                        when upper(title) LIKE upper('Частное туристское унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Частное туристское унитарное предприятие услуг ', 'ЧТурПУ ')
		                        when upper(title) LIKE upper('Частное транспортное унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Частное туристское транспортное предприятие услуг ', 'ЧТранУП ')
		                        when upper(title) LIKE upper('Частное унитарное производственно-торговое предприятие \"%\"')
		                            then REPLACE(title, 'Частное унитарное производственно-торговое предприятие ', 'ЧУПТП ')
		                        when upper(title) LIKE upper('Частное унитарное транспортно-туристическое предприятие \"%\"')
		                            then REPLACE(title, 'Частное унитарное транспортно-туристическое предприятие ', 'ЧУТТП ')
		                        when upper(title) LIKE upper('Частное учебно-производственное унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Частное учебно-производственное унитарное предприятие ', 'ЧУчПУП ')
 		                        when upper(title) LIKE upper('Производственное частное унитарное предприятие \"%\"')
 		                            then REPLACE(title, 'Производственное частное унитарное предприятие ', 'ПЧУП ')
 		                        when upper(title) LIKE upper('Государственное специализированное учебно-спортивное учреждение \"%\"')
 		                            then REPLACE(title, 'Государственное специализированное учебно-спортивное учреждение ', 'ГСУСУ ')
 		                        when upper(title) LIKE upper('Государственное учреждение образования \"%\"')
 		                            then REPLACE(title, 'Государственное учреждение образования ', 'ГУО ')
 		                        when upper(title) LIKE upper('Государственное объединение \"%\"')
 		                            then REPLACE(title, 'Государственное объединение ', 'ГО ')
 		                        when upper(title) LIKE upper('Государственное предприятие \"%\"')
 		                            then REPLACE(title, 'Государственное предприятие ', 'ГП ')
 		                        when upper(title) LIKE upper('Закрытое акционерное страховое общество \"%\"')
 		                            then REPLACE(title, 'Закрытое акционерное страховое общество ', 'ЗАСО ')
 		                        when upper(title) LIKE upper('Иностранное торговое унитарное предприятие \"%\"')
 		                            then REPLACE(title, 'Иностранное торговое унитарное предприятие ', 'ИТУП ')
 		                        when upper(title) LIKE upper('Частное туристическое унитарное предприятие \"%\"')
 		                            then REPLACE(title, 'Частное туристическое унитарное предприятие ', 'ЧТурУП ')
		                        when upper(title) LIKE upper('Частное транспортно-торговое унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Частное транспортно-торговое унитарное предприятие ', 'ЧТТУП ')
 		                        when upper(title) LIKE upper('Частное транспортно-производственное унитарное предприятие \"%\"')
 		                            then REPLACE(title, 'Частное транспортно-производственное унитарное предприятие ', 'ЧТТУП ')
 		                        when upper(title) LIKE upper('Частное торгово-транспортное унитарное предприятие \"%\"')
 		                            then REPLACE(title, 'Частное торгово-транспортное унитарное предприятие ', 'ЧТТУП ')
 		                        when upper(title) LIKE upper('Частное сервисное унитарное предприятие \"%\"')
 		                            then REPLACE(title, 'Частное сервисное унитарное предприятие ', 'ЧСУП ')
		                        when upper(title) LIKE upper('Частное учреждение образования \"%\"')
		                            then REPLACE(title, 'Частное учреждение образования ', 'ЧУО ')
		                        when upper(title) LIKE upper('Частное учреждение \"%\"')
		                            then REPLACE(title, 'Частное учреждение ', 'ЧУ ')
		                        when upper(title) LIKE upper('Частное ювелирное унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Частное ювелирное унитарное предприятие ', 'ЧЮУП ')
		                        when upper(title) LIKE upper('Частное учреждение культуры \"%\"')
		                            then REPLACE(title, 'Частное учреждение культуры ', 'ЧУК ')
		                        when upper(title) LIKE upper('Частное учреждение дополнительного образования взрослых \"%\"')
		                            then REPLACE(title, 'Частное учреждение дополнительного образования взрослых ', 'ЧУДОВ ')
		                        when upper(title) LIKE upper('Частное унитарное торговое предприятие \"%\"')
		                            then REPLACE(title, 'Частное унитарное торговое предприятие ', 'ЧУТП ')
		                        when upper(title) LIKE upper('Частное  унитарное предприятие по оказанию услуг \"%\"')
		                            then REPLACE(title, 'Частное  унитарное предприятие по оказанию услуг ', 'ЧУППОУ ')
		                        when upper(title) LIKE upper('Частное унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Частное унитарное предприятие ', 'ЧУП ')
		                        when upper(title) LIKE upper('Частное торгово-сервисное унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Частное торгово-сервисное унитарное предприятие ', 'ЧТСУП ')
		                        when upper(title) LIKE upper('Частное унитарное производственное предприятие \"%\"')
		                            then REPLACE(title, 'Частное унитарное производственное предприятие ', 'ЧУПП ')
		                        when upper(title) LIKE upper('Частное производственное унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Частное производственное унитарное предприятие ', 'ЧПУП')
		                        when upper(title) LIKE upper('Частное медицинское унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Частное медицинское унитарное предприятие ', 'ЧМУП ')
		                        when upper(title) LIKE upper('Учреждение образования \"%\"')
		                            then REPLACE(title, 'Учреждение образования ', 'УО ')
		                        when upper(title) LIKE upper('Учреждение культуры \"%\"')
		                            then REPLACE(title, 'Учреждение культуры ', 'УК ')
		                        when upper(title) LIKE upper('Учреждение здравоохранения \"%\"')
		                            then REPLACE(title, 'Учреждение здравоохранения ', 'УЗ ')
		                        when upper(title) LIKE upper('Унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Унитарное предприятие ', 'УП ')
		                        when upper(title) LIKE upper('Туристское частное унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Туристское частное унитарное предприятие ', 'ТурЧУП ')
		                        when upper(title) LIKE upper('Торговое частное унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Торговое частное унитарное предприятие ', 'ТоргЧУП ')
		                        when upper(title) LIKE upper('Торговое унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Торговое унитарное предприятие ', 'ТоргУП ')
		                        when upper(title) LIKE upper('Социально-благотворительное учреждение \"%\"')
		                            then REPLACE(title, 'Социально-благотворительное учреждение ', 'СоцБУ ')
		                        when upper(title) LIKE upper('Республиканское унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Республиканское унитарное предприятие ', 'РУП ')
		                        when upper(title) LIKE upper('Производственно-торговое частное унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Производственно-торговое частное унитарное предприятие ', 'ПТЧУП ')
		                        when upper(title) LIKE upper('Производственное унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Производственное унитарное предприятие ', 'ПУП ')
		                        when upper(title) LIKE upper('Производственное общество с ограниченной ответственностью \"%\"')
		                            then REPLACE(title, 'Производственное общество с ограниченной ответственностью ', 'ПООО ')
		                        when upper(title) LIKE upper('Производственное республиканское унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Производственное республиканское унитарное предприятие ', 'ПРУП ')
		                        when upper(title) LIKE upper('Унитарное частное производственно-торговое предприятие \"%\"')
		                            then REPLACE(title, 'Унитарное частное производственно-торговое предприятие ', 'УЧПТП ')
		                        when upper(title) LIKE upper('Унитарное частное сервисное предприятие \"%\"')
		                            then REPLACE(title, 'Унитарное частное сервисное предприятие ', 'УЧСП ')
		                        when upper(title) LIKE upper('Унитарное частное торговое предприятие \"%\"')
		                            then REPLACE(title, 'Унитарное частное торговое предприятие ', 'УЧТП ')
		                        when upper(title) LIKE upper('Унитарное частное торгово-производственное предприятие \"%\"')
		                            then REPLACE(title, 'Унитарное частное торгово-производственное предприятие ', 'УЧТПП ')
		                        when upper(title) LIKE upper('Унитарное торгово-производственное предприятие \"%\"')
		                            then REPLACE(title, 'Унитарное торгово-производственное предприятие ', 'УТПП ')
		                        when upper(title) LIKE upper('Унитарное частное производственное предприятие \"%\"')
		                            then REPLACE(title, 'Унитарное частное производственное предприятие ', 'УЧПП ')
		                        when upper(title) LIKE upper('Унитарное предприятие по оказанию услуг \"%\"')
		                            then REPLACE(title, 'Унитарное предприятие по оказанию услуг ', 'УПОУ')
		                        when upper(title) LIKE upper('Унитарное предприятие по оказанию медицинских услуг \"%\"')
		                            then REPLACE(title, 'Унитарное предприятие по оказанию медицинских услуг ', 'УПОМУ ')
		                        when upper(title) LIKE upper('Универсальный торговый комплекс -филиал \"%\"')
		                            then REPLACE(title, 'Универсальный торговый комплекс -филиал ', 'УТК-филиал ')
		                        when upper(title) LIKE upper('Универсальный торговый комплекс филиал \"%\"')
		                            then REPLACE(title, 'Универсальный торговый комплекс филиал ', 'УУТК-филиал ')
		                        when upper(title) LIKE upper('Универсальный торговый комплекс Филиал \"%\"')
		                            then REPLACE(title, 'Универсальный торговый комплекс Филиал ', 'УТК-филиал ')
		                        when upper(title) LIKE upper('Унитарное городское предприятие \"%\"')
		                            then REPLACE(title, 'Унитарное городское предприятие ', 'УГорП ')
		                        when upper(title) LIKE upper('Туристическое унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Туристическое унитарное предприятие ', 'ТурУП ')
		                        when upper(title) LIKE upper('Туристско-экскурсионное дочернее унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Туристско-экскурсионное дочернее унитарное предприятие ', 'ТурЭксДУП ')
		                        when upper(title) LIKE upper('Транспортное унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Транспортное унитарное предприятие ', 'ТрансУП ')
		                        when upper(title) LIKE upper('Торгово-производственное унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Торгово-производственное унитарное предприятие ', 'ТПУП ')
		                        when upper(title) LIKE upper('Торгово-производственное унитарное коммунальное предприятие \"%\"')
		                            then REPLACE(title, 'Торгово-производственное унитарное коммунальное предприятие ', 'ТПУКП ')
		                        when upper(title) LIKE upper('Торгово-производственное республиканское унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Торгово-производственное республиканское унитарное предприятие ', 'ТПРУП ')
		                        when upper(title) LIKE upper('Торгово-маркетинговое частное унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Торгово-маркетинговое частное унитарное предприятие ', 'ТМЧУП ')
		                        when upper(title) LIKE upper('Страховое общество с ограниченной ответственностью \"%\"')
		                            then REPLACE(title, 'Страховое общество с ограниченной ответственностью ', 'СтрахООО ')
		                        when upper(title) LIKE upper('Товарищество собственников \"%\"')
		                            then REPLACE(title, 'Товарищество собственников ', 'ТО ')
		                        when upper(title) LIKE upper('Торговое дочернее унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Торговое дочернее унитарное предприятие ', 'ТДУП ')
		                        when upper(title) LIKE upper('Социально-благотворительное учреждение помощи \"%\"')
		                            then REPLACE(title, 'Социально-благотворительное учреждение помощи ', 'СоцБлагУП ')
		                        when upper(title) LIKE upper('Совместное закрытое акционерное общество \"%\"')
		                            then REPLACE(title, 'Совместное закрытое акционерное общество ', 'СЗАО ')
		                        when upper(title) LIKE upper('Совместное общество с дополнительной ответственностью \"%\"')
		                            then REPLACE(title, 'Совместное общество с дополнительной ответственностью ', 'СОДО ')
		                        when upper(title) LIKE upper('Совместное открытое акционерное общество \"%\"')
		                            then REPLACE(title, 'Совместное открытое акционерное общество ', 'СОАО ')
		                        when upper(title) LIKE upper('Республиканское унитарное производственно-торговое предприятие \"%\"')
		                            then REPLACE(title, 'Республиканское унитарное производственно-торговое предприятие ', 'РУПТП ')
		                        when upper(title) LIKE upper('Республиканское дочернее торговое унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Республиканское дочернее торговое унитарное предприятие ', 'РДТУП ')
		                        when upper(title) LIKE upper('Производственно-торговое унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Производственно-торговое унитарное предприятие ', 'ПТУП ')
		                        when upper(title) LIKE upper('Представительство Закрытого акционерного страхового общества \"%\"')
		                            then REPLACE(title, 'Представительство Закрытого акционерного страхового общества ', 'Представительство ЗАСО ')
		                        when upper(title) LIKE upper('Общество с ограниченной ответственностью \"%\"')
		                            then REPLACE(title, 'Общество с ограниченной ответственностью ', 'ООО ')
		                        when upper(title) LIKE upper('Частное сервисно-торговое унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Частное сервисно-торговое унитарное предприятие ', 'ЧСТУП ')
		                        when upper(title) LIKE upper('Частное строительное унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Частное строительное унитарное предприятие ', 'ЧСтройУП ')
		                        when upper(title) LIKE upper('Частное торговое предприятие \"%\"')
		                            then REPLACE(title, 'Частное торговое предприятие ', 'ЧТП ')
		                        when upper(title) LIKE upper('Частное торговое туристическое унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Частное торговое туристическое унитарное предприятие ', 'ЧТТурУП')
		                        when upper(title) LIKE upper('Частное производственно-транспортное унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Частное производственно-транспортное унитарное предприятие ', 'ЧПТУП ')
		                        when upper(title) LIKE upper('Частное производственно-строительное унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Частное производственно-строительное унитарное предприятие ', 'ЧПСУП ')
		                        when upper(title) LIKE upper('Филиал страхового общества с ограниченной ответственностью \"%\"')
		                            then REPLACE(title, 'Филиал страхового общества с ограниченной ответственностью ', 'Филиал СООО ')
		                        when upper(title) LIKE upper('Филиал общества с ограниченной ответственностью \"%\"')
		                            then REPLACE(title, 'Филиал общества с ограниченной ответственностью ', 'Филиал ООО ')
		                        when upper(title) LIKE upper('Филиал закрытого акционерного страхового общества \"%\"')
		                            then REPLACE(title, 'Филиал закрытого акционерного страхового общества ', 'Филиал ЗАО ')
		                        when upper(title) LIKE upper('Фермерское хозяйство \"%\"')
		                            then REPLACE(title, 'Фермерское хозяйство ', 'ФХ ')
		                        when upper(title) LIKE upper('Учебно-спортивное учреждение \"%\"')
		                            then REPLACE(title, 'Учебно-спортивное учреждение ', 'УСУ ')
		                        when upper(title) LIKE upper('Туристическое частное унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Туристическое частное унитарное предприятие ', 'ТурЧуп ')
		                        when upper(title) LIKE upper('Торгово-производственное частное унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Торгово-производственное частное унитарное предприятие ', 'ТПЧУП ')
		                        when upper(title) LIKE upper('Торговое открытое акционерное общество \"%\"')
		                            then REPLACE(title, 'Торговое открытое акционерное общество ', 'ТОАО ')
		                        when upper(title) LIKE upper('Сервисно-торговое республиканское унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Сервисно-торговое республиканское унитарное предприятие ', 'СТРУП')
		                        when upper(title) LIKE upper('Сервисное унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Сервисное унитарное предприятие ', 'СУП ')
		                        when upper(title) LIKE upper('Садоводческое товарищество \"%\"')
		                            then REPLACE(title, 'Садоводческое товарищество ', 'СТ ')
		                        when upper(title) LIKE upper('Республиканское дочернее торговое унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Республиканское дочернее торговое унитарное предприятие ', 'РДТУП ')
		                        when upper(title) LIKE upper('Республиканское дочернее торговое предприятие \"%\"')
		                            then REPLACE(title, 'Республиканское дочернее торговое предприятие ', 'РДТП ')
		                        when upper(title) LIKE upper('Крестьянское (фермерское) хозяйство \"%\"')
		                            then REPLACE(title, 'Крестьянское (фермерское) хозяйство ', 'КФХ ')
		                        when upper(title) LIKE upper('Коммунальное унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Коммунальное унитарное предприятие ', 'КУП ')
		                        when upper(title) LIKE upper('Коммунальное производственно-торговое унитарное предприяти \"%\"')
		                            then REPLACE(title, 'Коммунальное производственно-торговое унитарное предприяти ', 'КПТУП ')
		                        when upper(title) LIKE upper('Коммунальное сервисное унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Коммунальное сервисное унитарное предприятие ', 'КСУП ')
		                        when upper(title) LIKE upper('Коммунальное унитарное кинозрелищное и досуговое предприятие \"%\"')
		                            then REPLACE(title, 'Коммунальное унитарное кинозрелищное и досуговое предприятие ', 'КУКДП ')
		                        when upper(title) LIKE upper('Коммунальное ремонтное унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Коммунальное ремонтное унитарное предприятие ', 'КРУП ')
		                        when upper(title) LIKE upper('Коммунальное унитарное кинозрелищное предприятие \"%\"')
		                            then REPLACE(title, 'Коммунальное унитарное кинозрелищное предприятие ', 'КУКП ')
		                        when upper(title) LIKE upper('Коммунальное унитарное полиграфическое предприятие \"%\"')
		                            then REPLACE(title, 'Коммунальное унитарное полиграфическое предприятие ', 'КУПП ')
		                        when upper(title) LIKE upper('Государственное лесохозяйственное учреждение  \"%\"')
		                            then REPLACE(title, 'Государственное лесохозяйственное учреждение  ', 'ГЛУ ')
		                        when upper(title) LIKE upper('Закрытое страховое акционерное общество \"%\"')
		                            then REPLACE(title, 'Закрытое страховое акционерное общество ', 'ЗСАО ')
		                        when upper(title) LIKE upper('Иностранное унитарное производственно-коммерческое предприятие \"%\"')
		                            then REPLACE(title, 'Иностранное унитарное производственно-коммерческое предприятие ', 'ИУПКП ')
		                        when upper(title) LIKE upper('Иностранное унитарное предприятие по оказанию услуг \"%\"')
		                            then REPLACE(title, 'Иностранное унитарное предприятие по оказанию услуг ', 'ИУПОУ ')
		                        when upper(title) LIKE upper('Иностранное частное торгово-производственное унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Иностранное частное торгово-производственное унитарное предприятие ', 'ИЧТПУП ')
		                        when upper(title) LIKE upper('Иностранное частное унитарное производственное предприятие \"%\"')
		                            then REPLACE(title, 'Иностранное частное унитарное производственное предприятие ', 'ИЧУПП ')
		                        when upper(title) LIKE upper('Кооперативно-торговое унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Кооперативно-торговое унитарное предприятие ', 'КТУП ')
		                        when upper(title) LIKE upper('Коммунальное унитарное предприятие по оказанию услуг \"%\"')
		                            then REPLACE(title, 'Коммунальное унитарное предприятие по оказанию услуг ', 'КУПОУ ')
		                        when upper(title) LIKE upper('Коммунальное производственно-торговое унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Коммунальное производственно-торговое унитарное предприятие ', 'КПТУП ')
		                        when upper(title) LIKE upper('Коммунальное транспортное унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Коммунальное транспортное унитарное предприятие ', 'КТрансУП ')
		                        when upper(title) LIKE upper('Коммунальное производственное унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Коммунальное производственное унитарное предприятие ', 'КПУП ')
		                        when upper(title) LIKE upper('Коммунальное жилищное ремонтно-эксплуатационное унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Коммунальное жилищное ремонтно-эксплуатационное унитарное предприятие ', 'КЖРЭУП ')
		                        when upper(title) LIKE upper('Коммунальное автотранспортное унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Коммунальное автотранспортное унитарное предприятие ', 'КАУП ')
		                        when upper(title) LIKE upper('Международный потребительский закупочно-распределительный кооператив \"%\"')
		                            then REPLACE(title, 'Международный потребительский закупочно-распределительный кооператив ', 'МПЗРК ')
		                        when upper(title) LIKE upper('Международное благотворительное общественное объединение \"%\"')
		                            then REPLACE(title, 'Международное благотворительное общественное объединение ', 'МБОО ')
		                        when upper(title) LIKE upper('Международное благотворительное общественное объединение помощи животным \"%\"')
		                            then REPLACE(title, 'Международное благотворительное общественное объединение помощи животным ', 'ММБООПЖ ')
		                        when upper(title) LIKE upper('Местный благотворительный фонд \"%\"')
		                            then REPLACE(title, 'Местный благотворительный фонд ', 'МБФ ')
		                        when upper(title) LIKE upper('Международная общественная организация \"%\"')
		                            then REPLACE(title, 'Международная общественная организация ', 'МОО ')
		                        when upper(title) LIKE upper('Научно-производственное общество с ограниченной ответственностью \"%\"')
		                            then REPLACE(title, 'Научно-производственное общество с ограниченной ответственностью ', 'НаучПООО ')
		                        when upper(title) LIKE upper('Научно-производственное общество с дополнительной ответственностью \"%\"')
		                            then REPLACE(title, 'Научно-производственное общество с дополнительной ответственностью ', 'НаучПОДО ')
		                        when upper(title) LIKE upper('Республиканское производственно-торговое унитарное предприятие \"%\"')
		                            then REPLACE(title, 'Республиканское производственно-торговое унитарное предприятие ', 'РПТУП ')
	                            else title
                        	end as new_title,
	                        case
		                        when upper(title) LIKE upper('Индивидуальный предприниматель %') then 'ИП'
		                        else 'Юридическое лицо'
	                        end as ownership
                            from oplati_analytic.bi_organisation bo
                            ) borg
                            on sca.org_id = borg.profile_id;"

  "tab_bi_pos_type_datails":
    clickhouse_query: "insert into oplati_views_report.bi_pos_type_datails
                        select
                        purchase_id,
                        toDateTime(created_date),
                        wallet_id,
                        toDateTime(bw.opened_on) as opened_on,
                        toDateTime(bw.closed_on) as wallet_close,
                        device_id,
                        app.status as status,
                        sum,
                        app.pos_id as pos_id,
                        spa.pos_name as pos_name,
                        spa.open_date as pos_open,
                        spa.close_date as pos_close,
                        sca.name as cashbox_name,
                        sca.reg_num as reg_num,
                        sca.open_date as cashbox_open,
                        sca.close_date as cashbox_close,
                        bop.company_id as company_id,
                        spa.org_id as profile_id,
                        bop.itn as itn,
                        ao.name as name,
                        spa.latitude as latitude,
                        spa.longitude as longitude,
                        spa.address as address,
                        spa.city as city,
                        spa.area as area,
                        spa.region as region,
                        sca.cashbox_type as cashbox_type,
                        bop.type_name as type_name,
                        bitrix_status_id,
                        support_manager,
                        sm.first_name,
                        sm.last_name,
                        sm.work_position
                        from
                        oplati_analytic.bi_pos_type_2023 app
                        left join
                        oplati_analytic.spr_pos_area spa
                        on
                        spa.pos_id = app.pos_id
                        left join
                        oplati_analytic.spr_organisation ao
                        on
                        spa.org_id = ao.org_id
                        left join
                        oplati_analytic.bi_organisation_payments bop
                        on
                        bop.org_id = ao.org_id
                        left join
                        oplati_analytic.spr_cashbox_area sca
                        on
                        sca.cash_id = app.device_id
                        left join
                        (select * from oplati_analytic.bi_wallet where wallet_type = 6) bw
                        on
                        bop.org_id = bw.profile_id
                        left join
                        oplati_analytic.bi_organisation bo
                        on
                        bo.profile_id = ao.org_id
                        left join
                        oplati_analytic.spr_managers sm
                        on
                       	bo.support_manager = sm.id
                        where status = 1 and toDate(created_date) = toDate(today()-1);"
